{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"openHASP Control your home-automation devices from a customizable touchscreen UI connected via MQTT. openHASP is a re-implementation of the popular HASwitchPlate sketch created by aderusha. The HASPone project uses a Wemos D1 mini and requires a Nextion/TJC HMI display. This rewrite removes the Nextion/TJC requirement by using the Light and Versatile Graphics Library on the MCU to drive a commodity display. This project also adds ESP32 and STM32F4 support to take advantage of the additional hardware capabilities. Demo Screens Features Feature ESP8266 ESP32 STM32F4 SPI display :white_check_mark: yes :white_check_mark: yes :white_check_mark: yes Parallel display :x: no :white_check_mark: yes :white_check_mark: yes PWM Screen dimming :white_check_mark: yes :white_check_mark: yes :white_check_mark: yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects :white_check_mark: yes :white_check_mark: yes :white_check_mark: yes Theme Support yes yes yes Custom .zi V5 font :white_check_mark: yes (latin1) :white_check_mark: yes (latin1) no MDI and FontAwesome Icons :white_check_mark: 1300+ :white_check_mark: 1300+ no PNG images :x: no :grey_question: tbd :grey_question: tbd Network :white_check_mark: Wi-Fi :white_check_mark: Wi-Fi :white_check_mark: Ethernet Support For support using openHASP, please join the #openHASP channel on Discord or use Discussions on Github.","title":"Home"},{"location":"#demo-screens","text":"","title":"Demo Screens"},{"location":"#features","text":"Feature ESP8266 ESP32 STM32F4 SPI display :white_check_mark: yes :white_check_mark: yes :white_check_mark: yes Parallel display :x: no :white_check_mark: yes :white_check_mark: yes PWM Screen dimming :white_check_mark: yes :white_check_mark: yes :white_check_mark: yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects :white_check_mark: yes :white_check_mark: yes :white_check_mark: yes Theme Support yes yes yes Custom .zi V5 font :white_check_mark: yes (latin1) :white_check_mark: yes (latin1) no MDI and FontAwesome Icons :white_check_mark: 1300+ :white_check_mark: 1300+ no PNG images :x: no :grey_question: tbd :grey_question: tbd Network :white_check_mark: Wi-Fi :white_check_mark: Wi-Fi :white_check_mark: Ethernet","title":"Features"},{"location":"#support","text":"For support using openHASP, please join the #openHASP channel on Discord or use Discussions on Github.","title":"Support"},{"location":"ESP32/","text":"Installation Download the firmware Go to the releases page on GitHub to download the latest openHASP binaries. Get the files required for ESP32: d1-mini-esp32_ili9341_full_4MB_v0.4.0.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github. Install the firmware Flash ESP32 When flashing the ESP32 for the first time, you need to flash it over serial using the full firmware binary file: esptool.py --port COM1 erase_flash esptool.py --port COM1 --baud 921600 write_flash 0x0 d1-mini-esp32_ili9341_full_4MB_<version>.bin Change COM1 to the correct port on your computer.","title":"ESP32"},{"location":"ESP32/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest openHASP binaries. Get the files required for ESP32: d1-mini-esp32_ili9341_full_4MB_v0.4.0.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github.","title":"Download the firmware"},{"location":"ESP32/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"ESP32/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to flash it over serial using the full firmware binary file: esptool.py --port COM1 erase_flash esptool.py --port COM1 --baud 921600 write_flash 0x0 d1-mini-esp32_ili9341_full_4MB_<version>.bin Change COM1 to the correct port on your computer.","title":"Flash ESP32"},{"location":"ESP8266/","text":"Installation Download the firmware Go to the releases page on GitHub to download the latest openHASP binaries. Pick the one appropriate for ESP8266: d1-mini-esp8266_ili9341_v0.3.2.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github. Install the firmware Flash ESP8266 For ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) Using esp-tool.py When flashing the ESP8266 for the first time, it is best to erase the flash before uploading the new firmware: esptool.py -p \"COM1\" erase_flash esptool.py -p \"COM1\" write_flash --flash_mode qio 0x0 d1-mini-esp8266_ili9341_v0.3.2.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip.","title":"ESP8266"},{"location":"ESP8266/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest openHASP binaries. Pick the one appropriate for ESP8266: d1-mini-esp8266_ili9341_v0.3.2.bin Note You can also download the nightly openHASP firmware.zip file from the Actions tab on Github.","title":"Download the firmware"},{"location":"ESP8266/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"ESP8266/#flash-esp8266","text":"For ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"ESP8266/#using-tasmotizer-windows","text":"","title":"Using Tasmotizer (Windows)"},{"location":"ESP8266/#using-esp-toolpy","text":"When flashing the ESP8266 for the first time, it is best to erase the flash before uploading the new firmware: esptool.py -p \"COM1\" erase_flash esptool.py -p \"COM1\" write_flash --flash_mode qio 0x0 d1-mini-esp8266_ili9341_v0.3.2.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip.","title":"Using esp-tool.py"},{"location":"characters/","text":"Languages Encoding The character sets are encoded in UTF-8. All character sets contain the ASCII 0x20-0x7E characters and the non-braking-space (NBSP). Each set contains roughly the same extended characters from its equivalent iso-8859 standard . For example: To display the \u00f7 character on the plate you need to use \\u00F7 in json or jsonl commands, or send the encoded UTF-8 bytes 0xC3 0xB7 in other commands. All character sets also contain about 100 standaard Material Design Icons for home automation use. The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scipts. Ascii ASCII 0x20-0x7E characters extended with these 12 additional characters: \u00a3 \u00b0 \u00b1 \u00b5 \u00b7 \u00bc \u00bd \u00be \u00d7 \u00f7 \u20ac NBSP Latin 1 Covers Northern and Western European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi) \u00a1 \u00a3 \u00b0 \u00b1 \u00b5 \u00b7 \u00bc \u00bd \u00be \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00dc \u00dd \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00ec \u00ed \u00ee \u00ef \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u0152 \u0153 \u0160 \u0161 \u017d \u017e \u1e9e \u20ac NBSP Latin 2 Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian \u00a3 \u00b0 \u00b1 \u00b5 \u00b7 \u00bc \u00bd \u00be \u00c1 \u00c2 \u00c9 \u00cd \u00ce \u00d3 \u00d6 \u00d7 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e9 \u00ed \u00ee \u00f3 \u00f6 \u00f7 \u00fa \u00fc \u0102 \u0103 \u010c \u010d \u0114 \u0115 \u0147 \u0148 \u0150 \u0151 \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u016e \u016f \u0170 \u0171 \u017d \u017e \u01c4 \u01c5 \u01c6 \u01c7 \u01c8 \u01c9 \u01ca \u01cb \u01cc \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b \u20ac NBSP Characters {{ read_csv(\"docs/assets/csv/characters.csv\") }}","title":"Characters"},{"location":"characters/#encoding","text":"The character sets are encoded in UTF-8. All character sets contain the ASCII 0x20-0x7E characters and the non-braking-space (NBSP). Each set contains roughly the same extended characters from its equivalent iso-8859 standard . For example: To display the \u00f7 character on the plate you need to use \\u00F7 in json or jsonl commands, or send the encoded UTF-8 bytes 0xC3 0xB7 in other commands. All character sets also contain about 100 standaard Material Design Icons for home automation use. The default font in pre-compiled binaries is Roboto-Condensed-Regular with the Latin 1 character set. There is no support for right-to-left scipts.","title":"Encoding"},{"location":"characters/#ascii","text":"ASCII 0x20-0x7E characters extended with these 12 additional characters: \u00a3 \u00b0 \u00b1 \u00b5 \u00b7 \u00bc \u00bd \u00be \u00d7 \u00f7 \u20ac NBSP","title":"Ascii"},{"location":"characters/#latin-1","text":"Covers Northern and Western European languages: English (en), French (fr), Spanish (es), Portuguese (pt), Italian (it), Dutch (nl), German (de), Danish (da), Swedish (sv), Norwegian (no), Finnish (fi) \u00a1 \u00a3 \u00b0 \u00b1 \u00b5 \u00b7 \u00bc \u00bd \u00be \u00bf \u00c0 \u00c1 \u00c2 \u00c3 \u00c4 \u00c5 \u00c6 \u00c7 \u00c8 \u00c9 \u00ca \u00cb \u00cc \u00cd \u00ce \u00cf \u00d1 \u00d2 \u00d3 \u00d4 \u00d5 \u00d6 \u00d7 \u00d8 \u00d9 \u00da \u00dc \u00dd \u00df \u00e0 \u00e1 \u00e2 \u00e3 \u00e4 \u00e5 \u00e6 \u00e7 \u00e8 \u00e9 \u00ea \u00ec \u00ed \u00ee \u00ef \u00f1 \u00f2 \u00f3 \u00f4 \u00f5 \u00f6 \u00f7 \u00f8 \u00f9 \u00fa \u00fb \u00fc \u00fd \u0152 \u0153 \u0160 \u0161 \u017d \u017e \u1e9e \u20ac NBSP","title":"Latin 1"},{"location":"characters/#latin-2","text":"Covers Central and Eastern European languages: Czech (cs), Hungarian (hu), Polish (pl), Romanian (ro), Croatian (hr), Slovak (sk), Slovenian (sl), Sorbian \u00a3 \u00b0 \u00b1 \u00b5 \u00b7 \u00bc \u00bd \u00be \u00c1 \u00c2 \u00c9 \u00cd \u00ce \u00d3 \u00d6 \u00d7 \u00da \u00dc \u00dd \u00e1 \u00e2 \u00e9 \u00ed \u00ee \u00f3 \u00f6 \u00f7 \u00fa \u00fc \u0102 \u0103 \u010c \u010d \u0114 \u0115 \u0147 \u0148 \u0150 \u0151 \u015e \u015f \u0160 \u0161 \u0162 \u0163 \u016e \u016f \u0170 \u0171 \u017d \u017e \u01c4 \u01c5 \u01c6 \u01c7 \u01c8 \u01c9 \u01ca \u01cb \u01cc \u01cd \u01ce \u0200 \u0201 \u0202 \u0203 \u0204 \u0205 \u0206 \u0207 \u0208 \u0209 \u020a \u020b \u020c \u020d \u020e \u020f \u0210 \u0211 \u0212 \u0213 \u0214 \u0215 \u0216 \u0217 \u0218 \u0219 \u021a \u021b \u20ac NBSP","title":"Latin 2"},{"location":"characters/#characters","text":"{{ read_csv(\"docs/assets/csv/characters.csv\") }}","title":"Characters"},{"location":"commands/","text":"Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device. Commands can be issued via the Serial commandline, telnet commandline or MQTT. For MQTT, use the hasp/<nodename>/command topic with payload <keyword> <parameter(s)> jsonl accepted parameters: one or more json formatted lines Create new objects or update the properties of an existing object. When updating an existing object the obj property is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands. Example: jsonl {\"obj\":\"btn\",\"id\":14,\"x\":120,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"Test\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0} For more details see Pages and Objects json accepted parameters: json array of strings Use the json command to send multiple commands as an array of strings in one payload. Example: json ['page 3','backlight {\"state\":\"OFF\",\"brightness\":100}','idle off'] This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer. page accepted parameters: [1-12] , prev , next or back Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage accepted parameters: [0-12] or all Deletes all objects on a given page. If no page number is specified, it clears the current page. Use clearpage all to clear all objects on all pages. To delete individual objects, you can issue the pXbY.delete command. dim Obsolete, use backlight instead light Obsolete, use backlight instead backlight accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 Example backlight {\"state\":\"on\",\"brightness\":128} sets the display to half the brightness. Instead of a json payload, you can use a simple payload. To change the state, use either on / off , true / false , 0 , yes / no . A simple integer payload of 1..255 will adjust the brightness. Example backlight off backlight 200 sets the display brightness to ~80%. moodlight accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 color or r, g, b: 0..255 An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command. moodlight {\"state\":\"off\",\"color\":\"green\"} moodlight {\"state\":true,\"color\":\"#ff00e7\"} moodlight {\"color\":12345} moodlight {\"state\":\"on\",\"r\":255,\"g\":0,\"b\":255} The state key accepts boolean values to turn the moodlight on or off The brightness key can be set between 1 and 255 to dim the moodlight The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters (or sending an empty payload to the hasp/<nodename>/command/moodlight topic) returns the current state: \"state/moodlight\" {\"state\":\"ON\",\"brightness\":255,\"color\":\"#ff0000\",\"r\":255,\"g\":0,\"b\":0} The color is returned as a hexadecimal value and as individual RGB channels. idle accepted parameters: off Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Calling the idle command without a parameter will return the current idle state short , long or off in the state/idle topic. wakeup Obsolete, use the idle off command instead output[x] where [x] is number of the gpio pin (0-39) accepted parameters: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to the same group using groupid during object creation will change state accordingly. System Commands calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic. For example: \"hasp/<platename>/state/statusupdate\" => { \"node\":\"plate35\", \"idle\":\"short\", \"version\":\"0.5.1\", \"uptime\":1813, \"ssid\":\"network\", \"rssi\":-63, \"ip\":\"192.168.4.2\", \"heapFree\":125820, \"heapFrag\":35, \"core\":\"v3.3.5-1-g85c43024c\", \"canUpdate\":\"false\", \"page\":1, \"numPages\":12, \"tftDriver\":\"ST7789\", \"tftWidth\":240, \"tftHeight\":320 } reboot or restart Saves any changes in the configuration file and reboots the device. !!! danger \" update accepted parameters: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function! Configuration Settings Wi-FI ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to. MQTT nodename Set the nodename of the device and mqtt topic for the node to hasp/<nodename>/ mqtthost Set the IP address or nodename of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker. config/submodule You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<nodename>/state/config . Passwords will be omitted from the result. config/wifi config/mqtt config/http config/mdns config/hasp {\"startdim\":255} config/gui config/debug {\"tele\":300} config/gpio To update the configuration simply issue the same command config/<submodule> with updated json payload.","title":"Commands"},{"location":"commands/#jsonl","text":"accepted parameters: one or more json formatted lines Create new objects or update the properties of an existing object. When updating an existing object the obj property is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. If the payload exceeds the MQTT buffer of 2 kB it will be cut off to fit, don't send too many lines in a single payload, you can always sends multiple jsonl commands. Example: jsonl {\"obj\":\"btn\",\"id\":14,\"x\":120,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"Test\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0} For more details see Pages and Objects","title":"jsonl"},{"location":"commands/#json","text":"accepted parameters: json array of strings Use the json command to send multiple commands as an array of strings in one payload. Example: json ['page 3','backlight {\"state\":\"OFF\",\"brightness\":100}','idle off'] This command will change to page 3, turn the backlight on at ~40% brightness and reset the idle timer.","title":"json"},{"location":"commands/#page","text":"accepted parameters: [1-12] , prev , next or back Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page .","title":"page"},{"location":"commands/#clearpage","text":"accepted parameters: [0-12] or all Deletes all objects on a given page. If no page number is specified, it clears the current page. Use clearpage all to clear all objects on all pages. To delete individual objects, you can issue the pXbY.delete command.","title":"clearpage"},{"location":"commands/#dim","text":"Obsolete, use backlight instead","title":"dim"},{"location":"commands/#light","text":"Obsolete, use backlight instead","title":"light"},{"location":"commands/#backlight","text":"accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 Example backlight {\"state\":\"on\",\"brightness\":128} sets the display to half the brightness. Instead of a json payload, you can use a simple payload. To change the state, use either on / off , true / false , 0 , yes / no . A simple integer payload of 1..255 will adjust the brightness. Example backlight off backlight 200 sets the display brightness to ~80%.","title":"backlight"},{"location":"commands/#moodlight","text":"accepted json keys: state: on / off , true / false , 0 / 1 , yes / no brightness: 1..255 color or r, g, b: 0..255 An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command. moodlight {\"state\":\"off\",\"color\":\"green\"} moodlight {\"state\":true,\"color\":\"#ff00e7\"} moodlight {\"color\":12345} moodlight {\"state\":\"on\",\"r\":255,\"g\":0,\"b\":255} The state key accepts boolean values to turn the moodlight on or off The brightness key can be set between 1 and 255 to dim the moodlight The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters (or sending an empty payload to the hasp/<nodename>/command/moodlight topic) returns the current state: \"state/moodlight\" {\"state\":\"ON\",\"brightness\":255,\"color\":\"#ff0000\",\"r\":255,\"g\":0,\"b\":0} The color is returned as a hexadecimal value and as individual RGB channels.","title":"moodlight"},{"location":"commands/#idle","text":"accepted parameters: off Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Calling the idle command without a parameter will return the current idle state short , long or off in the state/idle topic.","title":"idle"},{"location":"commands/#wakeup","text":"Obsolete, use the idle off command instead","title":"wakeup"},{"location":"commands/#outputx","text":"where [x] is number of the gpio pin (0-39) accepted parameters: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to the same group using groupid during object creation will change state accordingly.","title":"output[x]"},{"location":"commands/#system-commands","text":"calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic. For example: \"hasp/<platename>/state/statusupdate\" => { \"node\":\"plate35\", \"idle\":\"short\", \"version\":\"0.5.1\", \"uptime\":1813, \"ssid\":\"network\", \"rssi\":-63, \"ip\":\"192.168.4.2\", \"heapFree\":125820, \"heapFrag\":35, \"core\":\"v3.3.5-1-g85c43024c\", \"canUpdate\":\"false\", \"page\":1, \"numPages\":12, \"tftDriver\":\"ST7789\", \"tftWidth\":240, \"tftHeight\":320 } reboot or restart Saves any changes in the configuration file and reboots the device. !!! danger \" update accepted parameters: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function!","title":"System Commands"},{"location":"commands/#configuration-settings","text":"","title":"Configuration Settings"},{"location":"commands/#wi-fi","text":"ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to.","title":"Wi-FI"},{"location":"commands/#mqtt","text":"nodename Set the nodename of the device and mqtt topic for the node to hasp/<nodename>/ mqtthost Set the IP address or nodename of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker.","title":"MQTT"},{"location":"commands/#configsubmodule","text":"You can get or set the configuration of an openHASP submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<nodename>/state/config . Passwords will be omitted from the result. config/wifi config/mqtt config/http config/mdns config/hasp {\"startdim\":255} config/gui config/debug {\"tele\":300} config/gpio To update the configuration simply issue the same command config/<submodule> with updated json payload.","title":"config/submodule"},{"location":"compiling/","text":"Compiling Install Visual Studio Code on Linux on MacOS on Windows Additional packages on Linux: sudo apt update sudo apt install git python3-venv Clone openHASP Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. git clone --recursive https://github.com/HASwitchPlate/openHASP If you already cloned openHASP without the submodules, you can fetch the submodules seperately using: git submodule update --init --recursive To switch to a different branch use: git clone --recursive https://github.com/HASwitchPlate/openHASP cd openHASP git checkout 0.4.0 git submodule update --init --recursive Open in PlatformIO Open the project folder in Visual Studio Code . You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes. Create a configuration Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments. Customization The file include\\user_config_override-template.h lists the options you have to customize your build. Settings applied here will act as factory defaults in the firmware. Some of the available possibilities are: WiFi Settings MQTT Settings OTA Server Settings Syslog Settings Timezone Interface Language Web interface coloring Built-in fonts choice GPIO Templates Copy it to include\\user_config_override.h and change the settins per your needs. Also uncomment -DUSE_CONFIG_OVERRIDE in platformio_override.ini to ensure that the config overrides are taken into account during the compilation process. Compiling MCU Environments You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware. Native Linux build For native linux_sdl builds, you also need: sudo apt update sudo apt install build-essential libsdl2-dev Native MacOS build For native darwin_sdl builds, you also need Homebrew : brew install gcc sdl2 Native Windows build For native windows_sdl builds, you also need MingW: Use MSYS2 pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable (usually C:\\msys64\\mingw64\\bin ). See instruction, 4 . Block Diagram MQTT Tests To run the tavern testing suite, install the tavern python package and configure test\\config.yaml with your broker settings. pip install tavern tavern-ci .\\test\\","title":"Compiling"},{"location":"compiling/#install-visual-studio-code","text":"on Linux on MacOS on Windows Additional packages on Linux: sudo apt update sudo apt install git python3-venv","title":"Install Visual Studio Code"},{"location":"compiling/#clone-openhasp","text":"Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. git clone --recursive https://github.com/HASwitchPlate/openHASP If you already cloned openHASP without the submodules, you can fetch the submodules seperately using: git submodule update --init --recursive To switch to a different branch use: git clone --recursive https://github.com/HASwitchPlate/openHASP cd openHASP git checkout 0.4.0 git submodule update --init --recursive","title":"Clone openHASP"},{"location":"compiling/#open-in-platformio","text":"Open the project folder in Visual Studio Code . You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes.","title":"Open in PlatformIO"},{"location":"compiling/#create-a-configuration","text":"Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments.","title":"Create a configuration"},{"location":"compiling/#customization","text":"The file include\\user_config_override-template.h lists the options you have to customize your build. Settings applied here will act as factory defaults in the firmware. Some of the available possibilities are: WiFi Settings MQTT Settings OTA Server Settings Syslog Settings Timezone Interface Language Web interface coloring Built-in fonts choice GPIO Templates Copy it to include\\user_config_override.h and change the settins per your needs. Also uncomment -DUSE_CONFIG_OVERRIDE in platformio_override.ini to ensure that the config overrides are taken into account during the compilation process.","title":"Customization"},{"location":"compiling/#compiling","text":"","title":"Compiling"},{"location":"compiling/#mcu-environments","text":"You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware.","title":"MCU Environments"},{"location":"compiling/#native-linux-build","text":"For native linux_sdl builds, you also need: sudo apt update sudo apt install build-essential libsdl2-dev","title":"Native Linux build"},{"location":"compiling/#native-macos-build","text":"For native darwin_sdl builds, you also need Homebrew : brew install gcc sdl2","title":"Native MacOS build"},{"location":"compiling/#native-windows-build","text":"For native windows_sdl builds, you also need MingW: Use MSYS2 pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable (usually C:\\msys64\\mingw64\\bin ). See instruction, 4 .","title":"Native Windows build"},{"location":"compiling/#block-diagram","text":"","title":"Block Diagram"},{"location":"compiling/#mqtt-tests","text":"To run the tavern testing suite, install the tavern python package and configure test\\config.yaml with your broker settings. pip install tavern tavern-ci .\\test\\","title":"MQTT Tests"},{"location":"example-dashui/","text":"Dash UI Code To add an openHASP plate to your installation with the Dash UI sample configuration, upload a pages.jsonl file with the folowing content to your plate: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"id\":0,\"bg_color\":\"#FFFFFF\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0} {\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"LIVING ROOM\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"obj\":\"arc\",\"id\":2,\"x\":5,\"y\":45,\"w\":140,\"h\":100,\"max\":40,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"obj\":\"arc\",\"id\":3,\"x\":130,\"y\":45,\"w\":140,\"h\":100,\"max\":100,\"border_side\":0,\"type\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_color\":\"#000000\",\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"obj\":\"btn\",\"id\":4,\"x\":0,\"y\":120,\"w\":240,\"h\":20,\"val\":0,\"text\":\"CO2 levels: \",\"radius\":0,\"border_side\":0} {\"obj\":\"label\",\"id\":5,\"x\":2,\"y\":35,\"w\":140,\"text\":\"Temperature\"} {\"obj\":\"label\",\"id\":6,\"x\":140,\"y\":35,\"w\":140,\"text\":\"Humidity\"} {\"obj\":\"btn\",\"id\":7,\"x\":0,\"y\":160,\"w\":240,\"h\":20,\"text\":\"LIGHTS\",\"bg_color\":\"#F1C40F\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"obj\":\"label\",\"id\":8,\"x\":20,\"y\":190,\"w\":140,\"h\":20,\"text\":\"Ceiling Light\"} {\"obj\":\"switch\",\"id\":9,\"x\":160,\"y\":190,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"obj\":\"label\",\"id\":10,\"x\":20,\"y\":215,\"w\":140,\"h\":20,\"text\":\"Wall Light\"} {\"obj\":\"switch\",\"id\":11,\"x\":160,\"y\":215,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"obj\":\"label\",\"id\":12,\"x\":20,\"y\":240,\"w\":200,\"h\":20,\"text\":\"Ambient Light\"} {\"obj\":\"slider\",\"id\":13,\"x\":30,\"y\":265,\"w\":200,\"h\":10} {\"page\":0,\"comment\":\"---------- All pages ----------\"} {\"page\":0,\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":290,\"w\":76,\"h\":30,\"opacity\":50,\"text\":\"\\uE141\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":0,\"obj\":\"btn\",\"id\":2,\"x\":75,\"y\":290,\"w\":90,\"h\":30,\"opacity\":100,\"text\":\"\\uE2DC\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":0,\"obj\":\"btn\",\"id\":3,\"x\":164,\"y\":290,\"w\":76,\"h\":30,\"opacity\":100,\"text\":\"\\uF054\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} Assuming your plate's configured MQTT topic is plate35 , values for Temperature, Humidity and CO2 Sensor have to be sent from another device by publishing values to the appropriate command topic: hasp/plate35/command/p1b2.val %value% - to update Temperature arc value hasp/plate35/command/p1b2.value_str %value%\u00b0C - to update Temperature text value hasp/plate35/command/p1b3.val %value% - to update Humidity arc value hasp/plate35/command/p1b3.value_str %value% % - to update Humidity text value hasp/plate35/command/p1b4.text CO2 levels: %value% - to update CO2 level value Result","title":"Example dashui"},{"location":"example-lovelace/","text":"Lovelace-like entities Code To add an openHASP plate to your installation with the Dash UI sample configuration, upload a pages.jsonl file with the folowing content to your plate: {\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"ENTITIES\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"enabled\":0} {\"page\":1,\"id\":11,\"obj\":\"label\",\"x\":8,\"y\":30,\"w\":30,\"h\":35,\"text\":\"\\uE004\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":12,\"obj\":\"label\",\"x\":48,\"y\":40,\"w\":130,\"h\":30,\"text\":\"Presence override\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":13,\"obj\":\"switch\",\"x\":180,\"y\":37,\"w\":50,\"h\":25,\"radius\":25,\"radius2\":15} {\"page\":1,\"id\":21,\"obj\":\"label\",\"x\":8,\"y\":65,\"w\":30,\"h\":35,\"text\":\"\\uF054\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":22,\"obj\":\"label\",\"x\":48,\"y\":75,\"w\":130,\"h\":30,\"text\":\"Front gate\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":23,\"obj\":\"switch\",\"x\":180,\"y\":72,\"w\":50,\"h\":25,\"radius\":25,\"radius2\":15} {\"page\":1,\"id\":31,\"obj\":\"label\",\"x\":8,\"y\":100,\"w\":30,\"h\":35,\"text\":\"\\uF054\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":32,\"obj\":\"label\",\"x\":48,\"y\":110,\"w\":130,\"h\":30,\"text\":\"Back yard\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":33,\"obj\":\"switch\",\"x\":180,\"y\":107,\"w\":50,\"h\":25,\"radius\":25,\"radius2\":15} {\"page\":1,\"id\":41,\"obj\":\"label\",\"x\":8,\"y\":135,\"w\":30,\"h\":35,\"text\":\"\\uEA7A\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":42,\"obj\":\"label\",\"x\":48,\"y\":145,\"w\":130,\"h\":30,\"text\":\"Trash service\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":43,\"obj\":\"label\",\"x\":100,\"y\":145,\"w\":130,\"h\":30,\"text\":\"in 6 days\",\"align\":2,\"text_color\":\"black\"} {\"page\":1,\"id\":51,\"obj\":\"label\",\"x\":8,\"y\":170,\"w\":30,\"h\":35,\"text\":\"\\uE70D\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":52,\"obj\":\"label\",\"x\":48,\"y\":180,\"w\":130,\"h\":30,\"text\":\"Selective trash\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":53,\"obj\":\"label\",\"x\":100,\"y\":180,\"w\":130,\"h\":30,\"text\":\"in 10 days\",\"align\":2,\"text_color\":\"black\"} {\"page\":1,\"id\":61,\"obj\":\"label\",\"x\":8,\"y\":205,\"w\":30,\"h\":35,\"text\":\"\\uE32A\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":62,\"obj\":\"label\",\"x\":48,\"y\":215,\"w\":130,\"h\":30,\"text\":\"Green energy active\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":63,\"obj\":\"label\",\"x\":100,\"y\":215,\"w\":130,\"h\":30,\"text\":\"Yes :)\",\"align\":2,\"text_color\":\"black\"} {\"page\":1,\"id\":71,\"obj\":\"label\",\"x\":8,\"y\":240,\"w\":30,\"h\":35,\"text\":\"\\uE026\",\"align\":1,\"text_font\":28,\"text_color\":\"black\"} {\"page\":1,\"id\":72,\"obj\":\"label\",\"x\":48,\"y\":250,\"w\":130,\"h\":30,\"text\":\"Air quality\",\"align\":0,\"text_font\":16,\"text_color\":\"black\"} {\"page\":1,\"id\":73,\"obj\":\"label\",\"x\":100,\"y\":250,\"w\":130,\"h\":30,\"text\":\"OK (29.58 \u00b5g/m3)\",\"align\":2,\"text_color\":\"black\"} Check out the pagination example to learn how to implement the bottom bar. Check out the clock and temperature example to learn how to implement values to the top. Check out the Lovelace cover example to learn how to bring life to the objects. Result","title":"Example lovelace"},{"location":"example-pagination/","text":"Simple page navigation Pagination can be executed locally using the action attribute of the objects. The jsonl lines below will setup 3 buttons to the bottom of a 240x320 screen which will navigate back and forth between the pages: {\"page\":0,\"id\":1,\"obj\":\"btn\",\"action\":\"prev\",\"x\":0,\"y\":290,\"w\":79,\"h\":32,\"bg_color\":\"#2C3E50\",\"text\":\"\\uE141\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":28} {\"page\":0,\"id\":2,\"obj\":\"btn\",\"action\":\"back\",\"x\":80,\"y\":290,\"w\":80,\"h\":32,\"bg_color\":\"#2C3E50\",\"text\":\"\\uE2DC\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":22} {\"page\":0,\"id\":3,\"obj\":\"btn\",\"action\":\"next\",\"x\":161,\"y\":290,\"w\":79,\"h\":32,\"bg_color\":\"#2C3E50\",\"text\":\"\\uE142\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0,\"text_font\":28} Pagination can be also acomplished by enabling swipe gesture on certain objects. The jsonl line below will setup an invisible rectangle overlay at the top of the screen with enabled swipe : {\"page\":0,\"id\":6,\"obj\":\"obj\",\"swipe\":1,\"x\":0,\"y\":0,\"h\":30,\"w\":240,\"opacity\":0,\"comment\":\"swipe-area-at-top\"} !!! note You should to make sure that in your pages.jsonl these lines appear at the end of the file, so that these objects remain at the top, and no others will be drawn on top of them. To limit page navigation only to page numbers between 1 and 6: {\"page\":1,\"id\":0,\"prev\":6} {\"page\":6,\"id\":0,\"next\":1}","title":"Example pagination"},{"location":"example-widgets/","text":"Widgets Demo Code This is a real-world example of a pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":true,\"text\":\"Push Me \\uf0a6\"} {\"obj\":\"checkbox\",\"id\":2,\"x\":10,\"y\":100,\"w\":220,\"h\":55,\"text\":\"A Checkbox\"} {\"obj\":\"label\",\"id\":3,\"x\":10,\"y\":10,\"w\":220,\"h\":30,\"text\":\"My Label\",\"align\":1,\"padh\":50} {\"obj\":\"switch\",\"id\":4,\"x\":70,\"y\":205,\"w\":100,\"h\":55} {\"obj\":\"led\",\"id\":5,\"x\":10,\"y\":205,\"w\":55,\"h\":55} {\"obj\":\"dropdown\",\"id\":6,\"x\":10,\"y\":150,\"w\":150,\"options\":\"\\uf007 Line 1\\n\\uf007 Line 2\\n\\uf007 Line 3\"} {\"obj\":\"spinner\",\"id\":7,\"x\":165,\"y\":140,\"w\":70,\"h\":70} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"obj\":\"slider\",\"id\":1,\"x\":10,\"y\":170,\"w\":200,\"h\":50} {\"obj\":\"gauge\",\"id\":3,\"x\":13,\"y\":10,\"w\":100,\"h\":100} {\"obj\":\"bar\",\"id\":4,\"x\":10,\"y\":110,\"w\":200,\"h\":50} {\"obj\":\"lmeter\",\"id\":5,\"x\":127,\"y\":10,\"w\":100,\"h\":100} {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} {\"comment\":\"---------- Page 3 ----------\"} {\"obj\":\"cpicker\",\"id\":1,\"page\":3,\"x\":20,\"y\":0,\"w\":200,\"h\":200} {\"obj\":\"cpicker\",\"id\":2,\"page\":3,\"x\":20,\"y\":210,\"w\":200,\"h\":50,\"rect\":true} {\"page\":4,\"comment\":\"---------- Page 4 ----------\"} {\"obj\":\"dropdown\",\"id\":1,\"x\":10,\"y\":10,\"w\":220,\"options\":\"Spring\\nSummer\\nAutumn\\nWinter\"} {\"obj\":\"roller\",\"id\":2,\"x\":40,\"y\":50,\"w\":160,\"rows\":3,\"options\":\"2020\\n2021\\n2022\\n2023\\n2024\"} {\"page\":0,\"comment\":\"---------- All Pages ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"text\":\"\\uF053 Prev\"} {\"obj\":\"btn\",\"id\":2,\"x\":75,\"y\":270,\"w\":90,\"h\":50,\"opacity\":100,\"text\":\"\\uF015 Home\"} {\"obj\":\"btn\",\"id\":3,\"x\":165,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"text\":\"Next \\uF054\"} Result","title":"Example widgets"},{"location":"faq/","text":"Frequently Asked Questions :question: The font looks tiny On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Roboto Condensed 12. :question: How to use Fontawesome icons? Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository. :question: Is there a file browser built-in? A: Since v0.6.0 there is a native file browser included on ESP32. You can use it to upload, download and edit files on the flash partition of the ESP32. Using that webpage, you can right-click and delete files: Click on the File Editor button on the Main Webpage: :question: How to delete files from flash? Yes: See: Is there a file browser built-in?","title":"Faq"},{"location":"faq/#question-the-font-looks-tiny","text":"On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Roboto Condensed 12.","title":":question: The font looks tiny"},{"location":"faq/#question-how-to-use-fontawesome-icons","text":"Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository.","title":":question: How to use Fontawesome icons?"},{"location":"faq/#question-is-there-a-file-browser-built-in","text":"A: Since v0.6.0 there is a native file browser included on ESP32. You can use it to upload, download and edit files on the flash partition of the ESP32. Using that webpage, you can right-click and delete files: Click on the File Editor button on the Main Webpage:","title":":question: Is there a file browser built-in?"},{"location":"faq/#question-how-to-delete-files-from-flash","text":"Yes: See: Is there a file browser built-in?","title":":question: How to delete files from flash?"},{"location":"firmware-update/","text":"Firmware Update ESP Firmware Update Serial Upload Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation. HTTP Upload When the ESP has previously been flashed via serial, you can upload a new ota firmware binary using the internal webserver. HTTP Update When the ESP has previously been flashed via serial you can download and install a new ota firmware binary directly from an webserver. OTA Upload When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO. STM32F4xx Firmware Update","title":"Firmware update"},{"location":"firmware-update/#esp-firmware-update","text":"","title":"ESP Firmware Update"},{"location":"firmware-update/#serial-upload","text":"Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation.","title":"Serial Upload"},{"location":"firmware-update/#http-upload","text":"When the ESP has previously been flashed via serial, you can upload a new ota firmware binary using the internal webserver.","title":"HTTP Upload"},{"location":"firmware-update/#http-update","text":"When the ESP has previously been flashed via serial you can download and install a new ota firmware binary directly from an webserver.","title":"HTTP Update"},{"location":"firmware-update/#ota-upload","text":"When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO.","title":"OTA Upload"},{"location":"firmware-update/#stm32f4xx-firmware-update","text":"","title":"STM32F4xx Firmware Update"},{"location":"fonts-lvgl/","text":"Fonts Built-in Fonts The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Roboto Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8 Built-in Icons These icons are included in the Roboto Condensed font: Icon UTF-8 Desciption Icon UTF-8 Description F001 music F074 random F008 film F077 chevron-up F00B th-list F078 chevron-down F00C check F079 retweet F00D times F07B folder F011 power-off F093 upload F013 cog F095 phone F015 home F0C4 cut F019 download F0C5 copy F01C inbox F0C7 save F021 sync F0E7 bolt F026 volume-off F0EA paste F027 volume-down F0F3 bell F028 volume-up F11C keyboard F03E image F124 location-arrow F048 step-backward F15B file F04B play F1EB wifi F04C pause F240 battery-full F04D stop F241 battery-three-quarters F051 step-forward F242 battery-half F052 eject F243 battery-quarter F053 chevron-left F244 battery-empty F054 chevron-right F287 usb F067 plus F293 bluetooth F068 minus F304 pen F06E eye F2ED trash-alt F070 eye-slash F55A backspace F071 exclamation-triangle F7C2 sd-card To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} json example: [\"p3b10.text=\\uf00c OK\"] Custom Fonts You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. FontAwesome Icons","title":"Fonts lvgl"},{"location":"fonts-lvgl/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Roboto Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8","title":"Built-in Fonts"},{"location":"fonts-lvgl/#built-in-icons","text":"These icons are included in the Roboto Condensed font: Icon UTF-8 Desciption Icon UTF-8 Description F001 music F074 random F008 film F077 chevron-up F00B th-list F078 chevron-down F00C check F079 retweet F00D times F07B folder F011 power-off F093 upload F013 cog F095 phone F015 home F0C4 cut F019 download F0C5 copy F01C inbox F0C7 save F021 sync F0E7 bolt F026 volume-off F0EA paste F027 volume-down F0F3 bell F028 volume-up F11C keyboard F03E image F124 location-arrow F048 step-backward F15B file F04B play F1EB wifi F04C pause F240 battery-full F04D stop F241 battery-three-quarters F051 step-forward F242 battery-half F052 eject F243 battery-quarter F053 chevron-left F244 battery-empty F054 chevron-right F287 usb F067 plus F293 bluetooth F068 minus F304 pen F06E eye F2ED trash-alt F070 eye-slash F55A backspace F071 exclamation-triangle F7C2 sd-card To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} json example: [\"p3b10.text=\\uf00c OK\"]","title":"Built-in Icons"},{"location":"fonts-lvgl/#custom-fonts","text":"You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page.","title":"Custom Fonts"},{"location":"fonts-lvgl/#fontawesome-icons","text":"","title":"FontAwesome Icons"},{"location":"fonts-mdi/","text":"Fonts Built-in Fonts The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Ubuntu Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8 Proposed built-in Icons Top 80~100 icons will be included in the built-in font sizes, this means importance >=45 or >=35: {{ read_csv(\"docs/assets/csv/mdi-icons.csv\") }} To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"page\":2,\"id\":1,\"obj\":\"label\",\"x\":0,\"y\":50,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"} json example: [\"p2b1.text=\\uE64A Hello world!\"] Custom Fonts You can add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Fonts mdi"},{"location":"fonts-mdi/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Ubuntu Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8","title":"Built-in Fonts"},{"location":"fonts-mdi/#proposed-built-in-icons","text":"Top 80~100 icons will be included in the built-in font sizes, this means importance >=45 or >=35: {{ read_csv(\"docs/assets/csv/mdi-icons.csv\") }} To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"page\":2,\"id\":1,\"obj\":\"label\",\"x\":0,\"y\":50,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"} json example: [\"p2b1.text=\\uE64A Hello world!\"]","title":"Proposed built-in Icons"},{"location":"fonts-mdi/#custom-fonts","text":"You can add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Custom Fonts"},{"location":"fonts/","text":"Fonts Built-in Fonts The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 firmware builds additionally contain the Roboto Condensed font in four font sizes depending on the display resolution: - 320x240: 12, 16, 24 and 32pt including - 480x320: 16, 24, 32 and 48pt including Including selected glyphs of Latin-1 character set and MaterialDesign icons below. The built-in fonts can be set by using the pointsize as parameter. For example: p4b1.text_font=24 p4b2.value_font=12 Note It is possible to create custom builds with built-in fonts of other sizes (choose any four of 12, 14, 16, 20, 22, 24, 26, 28, 32, 36, 38, 40, 44, 48) and supporting Latin-2 or Cyrillic character sets (even combined) by customizing user_config_override.h . Built-in Icons The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons. {{ read_csv(\"docs/assets/csv/icons.csv\") }} To use an icon in a text you need to prefix the UTF-8 character code with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"page\":2,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":50,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\",\"text_font\":24} json example: [\"p2b1.text=\\uE64A Hello world!\"] External Fonts You can also add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"Fonts"},{"location":"fonts/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 firmware builds additionally contain the Roboto Condensed font in four font sizes depending on the display resolution: - 320x240: 12, 16, 24 and 32pt including - 480x320: 16, 24, 32 and 48pt including Including selected glyphs of Latin-1 character set and MaterialDesign icons below. The built-in fonts can be set by using the pointsize as parameter. For example: p4b1.text_font=24 p4b2.value_font=12 Note It is possible to create custom builds with built-in fonts of other sizes (choose any four of 12, 14, 16, 20, 22, 24, 26, 28, 32, 36, 38, 40, 44, 48) and supporting Latin-2 or Cyrillic character sets (even combined) by customizing user_config_override.h .","title":"Built-in Fonts"},{"location":"fonts/#built-in-icons","text":"The icons in the list below are included with the built-in font sizes. Included are a range of arrows, navigation, climate, controls, devices, energy, lights, places, presence, security, sound, time and wireless icons. {{ read_csv(\"docs/assets/csv/icons.csv\") }} To use an icon in a text you need to prefix the UTF-8 character code with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"page\":2,\"id\":1,\"obj\":\"label\",\"x\":10,\"y\":50,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\",\"text_font\":24} json example: [\"p2b1.text=\\uE64A Hello world!\"]","title":"Built-in Icons"},{"location":"fonts/#external-fonts","text":"You can also add a custom .zi font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. To use it, set the pointsize parameter of the property to 0 .","title":"External Fonts"},{"location":"gallery/","text":"Gallery","title":"Gallery"},{"location":"getting-started/","text":"Getting Started openHASP supports the ESP32, ESP8266 and STM32F4 families of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network. Below is a list of recommended development boards and a TFT touchscreen to get you up-and-running in no time. Recommended Boards table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Minimal Basic Standard MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.5 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram. The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Advanced users can build and compile custom configurations using PlatformIO, however this is not currently supported. Recommended Display Lolin TFT 2.4\" ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice. Backlight Control To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default. Do not use D3 for backlight control because it is already in use for touch! It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. The D1-mini has D4 connected to on-board LED and boot fails if pulled LOW Compatible ESP boards The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation . Alternative SPI Display Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires. Ready-made devices Some manufacturers offer IoT devices which are ready to go with openHASP: FreeTouchDeck Lanbon L8 ESP32-Touchdown","title":"Getting started"},{"location":"getting-started/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Minimal Basic Standard MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.5 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram. The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Advanced users can build and compile custom configurations using PlatformIO, however this is not currently supported.","title":"Recommended Boards"},{"location":"getting-started/#recommended-display","text":"","title":"Recommended Display"},{"location":"getting-started/#lolin-tft-24","text":"ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice.","title":"Lolin TFT 2.4\""},{"location":"getting-started/#backlight-control","text":"To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default. Do not use D3 for backlight control because it is already in use for touch! It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. The D1-mini has D4 connected to on-board LED and boot fails if pulled LOW","title":"Backlight Control"},{"location":"getting-started/#compatible-esp-boards","text":"The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation .","title":"Compatible ESP boards"},{"location":"getting-started/#alternative-spi-display","text":"Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Alternative SPI Display"},{"location":"getting-started/#ready-made-devices","text":"Some manufacturers offer IoT devices which are ready to go with openHASP: FreeTouchDeck Lanbon L8 ESP32-Touchdown","title":"Ready-made devices"},{"location":"installation/","text":"Installation Download the firmware Go to the releases page on GitHub to download the latest openHASP binaries. There are currently 2 download options, pick the one appropriate for your hardware: openHASP-0.2.0-esp32_ili9341_spi.bin + boot files openHASP-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO. Install the firmware Flash ESP32 When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin Flash ESP8266 Unlike the ESP32, for ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) Using esp-tool.py esptool.py -p \"COM1\" write_flash --flash_mode qio --flash_size 4m 0x0 d1-mini-esp8266_ili9341_<version>.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip. STM32F407 devEbox Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO. Using Serial Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using DFU (USB) Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using ST Link (USB) Install ST Link software Connect the devEbox using the USB port Launch ST Link Select the openHASP-0.2.0-stm32f407_devEbox_3.2_ili9341_fsmc.bin file Flash the firmware to the board","title":"Installation"},{"location":"installation/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest openHASP binaries. There are currently 2 download options, pick the one appropriate for your hardware: openHASP-0.2.0-esp32_ili9341_spi.bin + boot files openHASP-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO.","title":"Download the firmware"},{"location":"installation/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"installation/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"Flash ESP32"},{"location":"installation/#flash-esp8266","text":"Unlike the ESP32, for ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"installation/#using-tasmotizer-windows","text":"","title":"Using Tasmotizer (Windows)"},{"location":"installation/#using-esp-toolpy","text":"esptool.py -p \"COM1\" write_flash --flash_mode qio --flash_size 4m 0x0 d1-mini-esp8266_ili9341_<version>.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip.","title":"Using esp-tool.py"},{"location":"installation/#stm32f407-devebox","text":"Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO.","title":"STM32F407 devEbox"},{"location":"installation/#using-serial","text":"Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using:","title":"Using Serial"},{"location":"installation/#using-dfu-usb","text":"Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using:","title":"Using DFU (USB)"},{"location":"installation/#using-st-link-usb","text":"Install ST Link software Connect the devEbox using the USB port Launch ST Link Select the openHASP-0.2.0-stm32f407_devEbox_3.2_ili9341_fsmc.bin file Flash the firmware to the board","title":"Using ST Link (USB)"},{"location":"integration_openhab/","text":"We call plate any device running openHASP in your system. Jaffa Sunrise sample for openHAB The openHAB configuration files to have this demo load automatically can be found here . Update the IP-address for your MQTT-broker in the haspLVGL_demo.things file. Make sure you have your plate connected to the network and to your MQTT boker, and your topic is set to demo_plate . Configuration example To add an openhasp plate to your installation with Jaffa Sunrise sample configuration, upload a pages.jsonl file with the folowing content to your plate: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"obj\":\"btn\",\"id\":4,\"x\":5,\"y\":5,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Lights On\",\"value_ofs_x\":-85,\"value_font\":28,\"value_str\":\"\\uE6E8\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":5,\"x\":5,\"y\":68,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Daylight\",\"value_ofs_x\":-85,\"value_font\":28,\"value_str\":\"\\uE599\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":6,\"x\":5,\"y\":131,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Night\",\"value_ofs_x\":-85,\"value_font\":28,\"value_str\":\"\\uE594\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":7,\"x\":5,\"y\":194,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Lights Off\",\"value_ofs_x\":-85,\"value_font\":28,\"value_str\":\"\\uE335\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"obj\":\"label\",\"id\":8,\"x\":5,\"y\":5,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Kitchen Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"label\",\"id\":9,\"x\":5,\"y\":80,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Dining Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"label\",\"id\":10,\"x\":5,\"y\":165,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Front Blinds\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"slider\",\"id\":11,\"x\":20,\"y\":40,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":80,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"slider\",\"id\":12,\"x\":20,\"y\":120,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"slider\",\"id\":13,\"x\":20,\"y\":205,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":25,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"page\":3,\"comment\":\"---------- Page 3 ----------\"} {\"obj\":\"label\",\"id\":14,\"x\":42,\"y\":10,\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Gold\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":15,\"x\":42,\"y\":60,\"mode\":\"scroll\",\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Chet Faker\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"btn\",\"id\":16,\"x\":2,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uE4AE\",\"text_color\":\"#C7BAA7\",\"text_font\":28} {\"obj\":\"btn\",\"id\":17,\"x\":82,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uE3E4\",\"text_color\":\"#C7BAA7\",\"text_font\":28} {\"obj\":\"btn\",\"id\":18,\"x\":162,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uE4AD\",\"text_color\":\"#C7BAA7\",\"text_font\":28} {\"obj\":\"bar\",\"id\":19,\"x\":2,\"y\":105,\"w\":236,\"h\":20,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":15,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\"} {\"obj\":\"slider\",\"id\":20,\"x\":35,\"y\":220,\"w\":170,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":30,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"label\",\"id\":21,\"x\":2,\"y\":10,\"w\":40,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE75A\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":22,\"x\":2,\"y\":60,\"w\":36,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE004\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":23,\"x\":5,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE75F\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":24,\"x\":210,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uE57E\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"page\":0,\"comment\":\"---------- All pages ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":5,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uE04D\",\"text_color\":\"#978B7D\",\"text_font\":28} {\"obj\":\"btn\",\"id\":2,\"x\":83,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uE2DC\",\"text_color\":\"#978B7D\",\"text_font\":28} {\"obj\":\"btn\",\"id\":3,\"x\":161,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uE054\",\"text_color\":\"#978B7D\",\"text_font\":28} Restart the plate and the demo page should load automatically to your device. Result","title":"Integration openhab"},{"location":"license/","text":"License MIT License openHASP is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Components Core openHASP is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright\u00a9 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License . MCU TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . Native Application paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license Native Windows Application mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. Assets Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"License"},{"location":"license/#mit-license","text":"openHASP is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"license/#components","text":"","title":"Components"},{"location":"license/#core","text":"openHASP is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright\u00a9 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License .","title":"Core"},{"location":"license/#mcu","text":"TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License .","title":"MCU"},{"location":"license/#native-application","text":"paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license","title":"Native Application"},{"location":"license/#native-windows-application","text":"mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves.","title":"Native Windows Application"},{"location":"license/#assets","text":"Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"Assets"},{"location":"objects/","text":"Objects There are two ways to create an object on the screen: Uploading a pages.jsonl file onto the internal flash Use the jsonl command (via MQTT, serial or telnet console) Cheatsheet obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object img Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox Selector Messagebox tabview Selector Tabview tab Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc lmeter Range Line Meter gauge Range Gauge Common Parameters Common Properties These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..255 yes n/a ID of the object on this page obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object hidden bool no false object is hidden opacity 0..255 no 255 how much the the object is opaque radius uint16 no depends on theme the radius of the rounded corners of the object: 0 square corners 100 pill shaped object (true circle if object has same width and height) action string no 0 command handled locally (see below) swipe bool no false page navigation using swipe gestures (see below) click bool no true object is touch/clickable (also see enabled ) ext_click_h 0..255 no 0 extended horizontal clickable are on the left and right ext_click_v 0.255 no 0 extended vertical clickable are on the top and bottom Note Further customizable properties can be found in styling . Pages If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. \"page\":0 indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page. Actions Action commands are supported only by binary or visual type of objects and they are performed locally on the plate. The following actions can be set for these objects: - p1 to p12 to switch to the corresponding page numbers directly - prev to switch to the previous page - next to switch to the next page - back to go back to the home page Check out the example for how to implement actions. You can change the target pages using prev , back and next page attributes operation on the page object pXb0 . Swipe Objects and page area ( p0bY ) support swipe property. Enabling this will process left , right and down swipes on the object as next , prev and back page changes, respectively. The start of the swipe needs to be on the element which has this property enabled for the feature to activate. Note: Page id p0b0 is not valid to set this property as it has to be set on real elements. Events All objects are touchable by default and respond to touch events. To disable touch events for an object set its enabled property to false . In this case the touch event \"goes through\" to the object on the layer below or to the page itself. Events (and values) are published in a state topic corresponding to the object, eg. hasp/<nodename>/state/p1b2 with payload in json format eg. {\"event\":\"up\",\"val\":1} . Possible events (depending on object type) are: Event Description down Occurs when a button goes from depressed to pressed (the moment of touch) up The button was released within a short time i.e. a short press has occurred release The button is released after being pressed for over the threshold time long Event is sent when the button is still being pressed after the threshold time of 400ms hold The HOLD event is repeated every 200ms while the button is still pressed changed Event is sent when the value of the object has changed during the event Tip: To actively see the sent out events you can use an MQTT client app and subscribe to the hasp/# topic. Common Methods These are the common methods shared among all objects, Method Parameters Description clear Delete the children from the object delete Delete the object and its children from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page Example commands: p1b5.delete p1b3.to_front Object Types Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties. Text Label obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. mode string crop The wrapping mode of long text labels: expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : {\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":0,\"y\":50,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"} Button obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 0 = untoggled, 1 = toggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Normal Button\",\"mode\":\"break\",\"align\":1} {\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"Toggle Button\",\"mode\":\"break\",\"align\":1} Normal buttons ( toggle=false ) send touch events while they occur: Short touch: {\"event\":\"down\"} {\"event\":\"up\"} Long press: {\"event\":\"down\"} {\"event\":\"long\"} {\"event\":\"hold\"} {\"event\":\"hold\"} {\"event\":\"release\"} Toggle buttons ( toggle=true ) send out the old value in the down event and the new value in the up event when released: Toggle ON: {\"event\":\"down\",\"val\":0} {\"event\":\"up\",\"val\":1} Toggle OFF: {\"event\":\"down\",\"val\":1} {\"event\":\"up\",\"val\":0} Switch obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 depends on theme changes knob corner radius (also see radius ) Example jsonl : {\"page\":1,\"id\":4,\"obj\":\"switch\",\"x\":125,\"y\":145,\"w\":105,\"h\":55,\"radius\":15} Events generated by switch are similar to the ones generate by the toggle buttons. Checkbox obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Example jsonl : {\"page\":1,\"id\":5,\"obj\":\"checkbox\",\"x\":10,\"y\":145,\"w\":105,\"text\":\" Checkbox\"} Events generated by checkbox are similar to the ones generate by the toggle buttons. Progress Bar obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical bars can be created if the width of the object is smaller than its height. Slider obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical sliders can be created if the width of the object is smaller than its height. Example jsonl : {\"page\":1,\"id\":6,\"obj\":\"slider\",\"x\":20,\"y\":250,\"w\":200,\"h\":20,\"min\":15,\"max\":35} While pressing and dragging the slider object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): {\"event\":\"down\",\"val\":21} {\"event\":\"changed\",\"val\":22} {\"event\":\"changed\",\"val\":23} {\"event\":\"changed\",\"val\":25} {\"event\":\"changed\",\"val\":27} {\"event\":\"changed\",\"val\":29} {\"event\":\"up\",\"val\":31} Arc obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Note Check out value styling to display a textual value in the middle of the arc. Example jsonl : {\"page\":1,\"id\":9,\"obj\":\"arc\",\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"adjustable\":true} While pressing and dragging the arc object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): {\"event\":\"down\",\"val\":21} {\"event\":\"changed\",\"val\":22} {\"event\":\"changed\",\"val\":23} {\"event\":\"changed\",\"val\":25} {\"event\":\"changed\",\"val\":27} {\"event\":\"changed\",\"val\":29} {\"event\":\"up\",\"val\":31} Dropdown List obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: 0 = down, 1 = up, 2 = left, 3 = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : {\"page\":1,\"id\":10,\"obj\":\"dropdown\",\"x\":10,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"} When the item is changed both val and text of the newly selected item are send out accompanied by the change event. Roller obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height mode 0..1 0 Roller mode: 0 = normal (finite), 1 = infinite align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : {\"page\":1,\"id\":11,\"obj\":\"roller\",\"x\":125,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\",\"mode\":1} When the item is changed both val and text of the newly selected item are send out accompanied by the change event. Line Meter obj: lmeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line and scale properties to customize. Example jsonl : {\"page\":1,\"id\":12,\"obj\":\"lmeter\",\"x\":20,\"y\":70,\"w\":200,\"h\":200,\"value_str\":\"Temp\",\"val\":75,\"line_count\":35,\"line_rounded\":1} Gauge obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Example jsonl : {\"page\":1,\"id\":13,\"obj\":\"gauge\",\"x\":20,\"y\":70,\"w\":200,\"h\":200} Use scale properties to customize. Tabview obj: tabview A tabview is an object that can hold multiple tab objects. You first create the tabview object and then add tab objects to it. Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons: 0 = none 1 = top 2 = bottom 3 = left 4 = right count int 0 Read-only The number of tabs of the tabview To change the currently visible tab, use the val attribute after all tabs have been added. Example jsonl : {\"page\":1,\"id\":10,\"obj\":\"tabview\",\"btn_pos\":1} Tab obj: tab Property Value Default Description parentid int8 0 The id of the tabview object to which this tab is added text string \"Tab\" The name of tab Set the parent object by referencing the parentid in the tab. It must be a tabview object. Example jsonl : {\"page\":1,\"id\":50,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 1\"} {\"page\":1,\"id\":51,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 2\"} {\"page\":1,\"id\":52,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 3\"} To add other objects to these tabs, also use the parentid when creating those objects. Color picker obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width int 25 The width of the color gradient of the circle pad_inner int 10 The padding between the circle and the inner preview circle The object will automatically adjust based on the w and h properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular. By long pressing the inner preview circle, the color picker will through the color modes: hue > saturation > value. Double-click on the inner preview circle to reset the current value. Setting Color Example MQTT commands: hasp/<nodename>/command/p0b2.color 13891 hasp/<nodename>/command/p1b5.color silver hasp/<nodename>/command/p2b3.color #C0C0C0 Events While pressing and dragging the cpicker object the following events are sent: down (old color), changed (repeatedly until released) and up (value at the moment of releasing it): {\"event\":\"down\",\"color\":\"#8300ff\",\"r\":131,\"g\":0,\"b\":255} {\"event\":\"changed\",\"color\":\"#7300ff\",\"r\":115,\"g\":0,\"b\":255} {\"event\":\"changed\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255} {\"event\":\"up\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255} Spinner obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 0 = clockwise, 1 = counter-clockwise angle 0-360 60 The length of the arc in degrees Note Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly. LED Indicator obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ] Button Matrix obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example jsonl : {\"page\":1,\"id\":20,\"obj\":\"btnmatrix\",\"x\":10,\"y\":10,\"w\":220,\"h\":150,\"options\":[\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"],\"toggle\":1,\"one_check\":1} Messagebox obj: msgbox Property Value Default Description text string \"\" The text of the message to be displayed options json array [\"OK\"] Json array of strings where each element is the label of a button ~~modal~~ bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen. Note The messagebox object is automatically deleted when it is closed. You will need to create it again using jsonl to pop-up a new message. Example jsonl : {\"page\":1,\"id\":24,\"obj\":\"msgbox\",\"text\":\"A message box with two buttons\",\"options\":[\"Apply\",\"Close\"]} Image obj: img Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int 0 Shift the picture horizontally relative to the image object offset_y int 0 Shift the picture vertically relative to the image object You can use image_recolor and image_recolor_opa from the image styling properties to apply a color overlay mask. Example jsonl : {\"page\":1,\"id\":34,\"obj\":\"img\",\"src\":\"/littlefs/image.png\",\"auto_size\":0,\"w\":50} Base Object obj: obj The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!","title":"Objects"},{"location":"objects/#cheatsheet","text":"obj Type Description btn Binary Button switch Toggle Switch checkbox Toggle Checkbox label Visual Label led Visual LED spinner Visual Spinner obj Visual Base Object img Visual Image dropdown Selector Dropdown List roller Selector Roller btnmatrix Selector Button Matrix msgbox Selector Messagebox tabview Selector Tabview tab Selector Tab cpicker Selector Color picker bar Range Progress Bar slider Range Slider arc Range Arc lmeter Range Line Meter gauge Range Gauge","title":"Cheatsheet"},{"location":"objects/#common-parameters","text":"","title":"Common Parameters"},{"location":"objects/#common-properties","text":"These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..255 yes n/a ID of the object on this page obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on (see below) groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object hidden bool no false object is hidden opacity 0..255 no 255 how much the the object is opaque radius uint16 no depends on theme the radius of the rounded corners of the object: 0 square corners 100 pill shaped object (true circle if object has same width and height) action string no 0 command handled locally (see below) swipe bool no false page navigation using swipe gestures (see below) click bool no true object is touch/clickable (also see enabled ) ext_click_h 0..255 no 0 extended horizontal clickable are on the left and right ext_click_v 0.255 no 0 extended vertical clickable are on the top and bottom Note Further customizable properties can be found in styling .","title":"Common Properties"},{"location":"objects/#pages","text":"If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. \"page\":0 indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page.","title":"Pages"},{"location":"objects/#actions","text":"Action commands are supported only by binary or visual type of objects and they are performed locally on the plate. The following actions can be set for these objects: - p1 to p12 to switch to the corresponding page numbers directly - prev to switch to the previous page - next to switch to the next page - back to go back to the home page Check out the example for how to implement actions. You can change the target pages using prev , back and next page attributes operation on the page object pXb0 .","title":"Actions"},{"location":"objects/#swipe","text":"Objects and page area ( p0bY ) support swipe property. Enabling this will process left , right and down swipes on the object as next , prev and back page changes, respectively. The start of the swipe needs to be on the element which has this property enabled for the feature to activate. Note: Page id p0b0 is not valid to set this property as it has to be set on real elements.","title":"Swipe"},{"location":"objects/#events","text":"All objects are touchable by default and respond to touch events. To disable touch events for an object set its enabled property to false . In this case the touch event \"goes through\" to the object on the layer below or to the page itself. Events (and values) are published in a state topic corresponding to the object, eg. hasp/<nodename>/state/p1b2 with payload in json format eg. {\"event\":\"up\",\"val\":1} . Possible events (depending on object type) are: Event Description down Occurs when a button goes from depressed to pressed (the moment of touch) up The button was released within a short time i.e. a short press has occurred release The button is released after being pressed for over the threshold time long Event is sent when the button is still being pressed after the threshold time of 400ms hold The HOLD event is repeated every 200ms while the button is still pressed changed Event is sent when the value of the object has changed during the event Tip: To actively see the sent out events you can use an MQTT client app and subscribe to the hasp/# topic.","title":"Events"},{"location":"objects/#common-methods","text":"These are the common methods shared among all objects, Method Parameters Description clear Delete the children from the object delete Delete the object and its children from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page Example commands: p1b5.delete p1b3.to_front","title":"Common Methods"},{"location":"objects/#text-label","text":"obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. mode string crop The wrapping mode of long text labels: expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : {\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":0,\"y\":50,\"w\":150,\"h\":50,\"text\":\"\\uE64A Hello world!\"}","title":"Text Label"},{"location":"objects/#button","text":"obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 0 = untoggled, 1 = toggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand Expand the object size to the text size break Keep the object width, break the too long lines and expand the object height dots Keep the size and write dots at the end if the text is too long scroll Keep the size and roll the text back and forth loop Keep the size and roll the text circularly crop Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example jsonl : {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":false,\"text\":\"Normal Button\",\"mode\":\"break\",\"align\":1} {\"page\":1,\"id\":3,\"obj\":\"btn\",\"x\":125,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"Toggle Button\",\"mode\":\"break\",\"align\":1} Normal buttons ( toggle=false ) send touch events while they occur: Short touch: {\"event\":\"down\"} {\"event\":\"up\"} Long press: {\"event\":\"down\"} {\"event\":\"long\"} {\"event\":\"hold\"} {\"event\":\"hold\"} {\"event\":\"release\"} Toggle buttons ( toggle=true ) send out the old value in the down event and the new value in the up event when released: Toggle ON: {\"event\":\"down\",\"val\":0} {\"event\":\"up\",\"val\":1} Toggle OFF: {\"event\":\"down\",\"val\":1} {\"event\":\"up\",\"val\":0}","title":"Button"},{"location":"objects/#switch","text":"obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color radius2 int16 depends on theme changes knob corner radius (also see radius ) Example jsonl : {\"page\":1,\"id\":4,\"obj\":\"switch\",\"x\":125,\"y\":145,\"w\":105,\"h\":55,\"radius\":15} Events generated by switch are similar to the ones generate by the toggle buttons.","title":"Switch"},{"location":"objects/#checkbox","text":"obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Example jsonl : {\"page\":1,\"id\":5,\"obj\":\"checkbox\",\"x\":10,\"y\":145,\"w\":105,\"text\":\" Checkbox\"} Events generated by checkbox are similar to the ones generate by the toggle buttons.","title":"Checkbox"},{"location":"objects/#progress-bar","text":"obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical bars can be created if the width of the object is smaller than its height.","title":"Progress Bar"},{"location":"objects/#slider","text":"obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator start_value int16 0 optional start value of the indicator Vertical sliders can be created if the width of the object is smaller than its height. Example jsonl : {\"page\":1,\"id\":6,\"obj\":\"slider\",\"x\":20,\"y\":250,\"w\":200,\"h\":20,\"min\":15,\"max\":35} While pressing and dragging the slider object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): {\"event\":\"down\",\"val\":21} {\"event\":\"changed\",\"val\":22} {\"event\":\"changed\",\"val\":23} {\"event\":\"changed\",\"val\":25} {\"event\":\"changed\",\"val\":27} {\"event\":\"changed\",\"val\":29} {\"event\":\"up\",\"val\":31}","title":"Slider"},{"location":"objects/#arc","text":"obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Note Check out value styling to display a textual value in the middle of the arc. Example jsonl : {\"page\":1,\"id\":9,\"obj\":\"arc\",\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"adjustable\":true} While pressing and dragging the arc object the following events are sent: down (old value), changed (repeatedly until released) and up (value at the moment of releasing it): {\"event\":\"down\",\"val\":21} {\"event\":\"changed\",\"val\":22} {\"event\":\"changed\",\"val\":23} {\"event\":\"changed\",\"val\":25} {\"event\":\"changed\",\"val\":27} {\"event\":\"changed\",\"val\":29} {\"event\":\"up\",\"val\":31}","title":"Arc"},{"location":"objects/#dropdown-list","text":"obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item direction byte 0 Direction where the dropdown expands: 0 = down, 1 = up, 2 = left, 3 = right Note: up and down are superseeded by the screen size. show_selected bool true Show the selected option or a static text max_height int16 3/4 of screen height The maximum height of the open drop-down list Method Parameters Description open To manually open the drop-down list close To manually close the drop-down list To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : {\"page\":1,\"id\":10,\"obj\":\"dropdown\",\"x\":10,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\"} When the item is changed both val and text of the newly selected item are send out accompanied by the change event.","title":"Dropdown List"},{"location":"objects/#roller","text":"obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height mode 0..1 0 Roller mode: 0 = normal (finite), 1 = infinite align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. Example jsonl : {\"page\":1,\"id\":11,\"obj\":\"roller\",\"x\":125,\"y\":205,\"w\":105,\"h\":30,\"options\":\"Apple\\nBanana\\nOrange\\nMelon\",\"mode\":1} When the item is changed both val and text of the newly selected item are send out accompanied by the change event.","title":"Roller"},{"location":"objects/#line-meter","text":"obj: lmeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line and scale properties to customize. Example jsonl : {\"page\":1,\"id\":12,\"obj\":\"lmeter\",\"x\":20,\"y\":70,\"w\":200,\"h\":200,\"value_str\":\"Temp\",\"val\":75,\"line_count\":35,\"line_rounded\":1}","title":"Line Meter"},{"location":"objects/#gauge","text":"obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and major ticks) of the scale line_count uint16 31 number of minor ticks of the entire scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Example jsonl : {\"page\":1,\"id\":13,\"obj\":\"gauge\",\"x\":20,\"y\":70,\"w\":200,\"h\":200} Use scale properties to customize.","title":"Gauge"},{"location":"objects/#tabview","text":"obj: tabview A tabview is an object that can hold multiple tab objects. You first create the tabview object and then add tab objects to it. Property Value Default Description val int8 0 The number of the active tab, starting at 0 text string \"\" The name of the active tab btn_pos 0..4 1 Position of the tab buttons: 0 = none 1 = top 2 = bottom 3 = left 4 = right count int 0 Read-only The number of tabs of the tabview To change the currently visible tab, use the val attribute after all tabs have been added. Example jsonl : {\"page\":1,\"id\":10,\"obj\":\"tabview\",\"btn_pos\":1}","title":"Tabview"},{"location":"objects/#tab","text":"obj: tab Property Value Default Description parentid int8 0 The id of the tabview object to which this tab is added text string \"Tab\" The name of tab Set the parent object by referencing the parentid in the tab. It must be a tabview object. Example jsonl : {\"page\":1,\"id\":50,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 1\"} {\"page\":1,\"id\":51,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 2\"} {\"page\":1,\"id\":52,\"obj\":\"tab\",\"parentid\":10,\"text\":\"Tab 3\"} To add other objects to these tabs, also use the parentid when creating those objects.","title":"Tab"},{"location":"objects/#color-picker","text":"obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb scale_width int 25 The width of the color gradient of the circle pad_inner int 10 The padding between the circle and the inner preview circle The object will automatically adjust based on the w and h properties: when the object is longer then it is height a rectangular color picker is created, otherwise it will be circular. By long pressing the inner preview circle, the color picker will through the color modes: hue > saturation > value. Double-click on the inner preview circle to reset the current value.","title":"Color picker"},{"location":"objects/#setting-color","text":"Example MQTT commands: hasp/<nodename>/command/p0b2.color 13891 hasp/<nodename>/command/p1b5.color silver hasp/<nodename>/command/p2b3.color #C0C0C0","title":"Setting Color"},{"location":"objects/#events_1","text":"While pressing and dragging the cpicker object the following events are sent: down (old color), changed (repeatedly until released) and up (value at the moment of releasing it): {\"event\":\"down\",\"color\":\"#8300ff\",\"r\":131,\"g\":0,\"b\":255} {\"event\":\"changed\",\"color\":\"#7300ff\",\"r\":115,\"g\":0,\"b\":255} {\"event\":\"changed\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255} {\"event\":\"up\",\"color\":\"#6200ff\",\"r\":98,\"g\":0,\"b\":255}","title":"Events"},{"location":"objects/#spinner","text":"obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 0 0 = clockwise, 1 = counter-clockwise angle 0-360 60 The length of the arc in degrees Note Placing objects over/under the spinner will increase the CPU load because all objects need to be redrawn constantly.","title":"Spinner"},{"location":"objects/#led-indicator","text":"obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ]","title":"LED Indicator"},{"location":"objects/#button-matrix","text":"obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons align 0..2 1 Text alignment: 0 = left, 1 = center, 2 = right toggle bool false All buttons behave as toggle buttons or normal buttons one_check bool false Allow only one button to be checked (toggled) at once The styling properties apply to all buttons in the matrix. To change the color of a single label you can prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example jsonl : {\"page\":1,\"id\":20,\"obj\":\"btnmatrix\",\"x\":10,\"y\":10,\"w\":220,\"h\":150,\"options\":[\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"],\"toggle\":1,\"one_check\":1}","title":"Button Matrix"},{"location":"objects/#messagebox","text":"obj: msgbox Property Value Default Description text string \"\" The text of the message to be displayed options json array [\"OK\"] Json array of strings where each element is the label of a button ~~modal~~ bool false Make the messagebox a modal dialog requiring user input auto_close int16 0 Close the pop-up message automatically after this number of milliseconds have passed The Message boxes act as a pop-up. The default width is the horizontal screen size, the height adjusts according to the contents of the message. The pop-up is centered on the screen. Note The messagebox object is automatically deleted when it is closed. You will need to create it again using jsonl to pop-up a new message. Example jsonl : {\"page\":1,\"id\":24,\"obj\":\"msgbox\",\"text\":\"A message box with two buttons\",\"options\":[\"Apply\",\"Close\"]}","title":"Messagebox"},{"location":"objects/#image","text":"obj: img Property Value Default Description src string \"\" The name of the image file auto_size bool true Automatically set the size of the image object to the image source offset_x int 0 Shift the picture horizontally relative to the image object offset_y int 0 Shift the picture vertically relative to the image object You can use image_recolor and image_recolor_opa from the image styling properties to apply a color overlay mask. Example jsonl : {\"page\":1,\"id\":34,\"obj\":\"img\",\"src\":\"/littlefs/image.png\",\"auto_size\":0,\"w\":50}","title":"Image"},{"location":"objects/#base-object","text":"obj: obj The Base Object can be directly used as a simple, empty widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object. It catches touches!","title":"Base Object"},{"location":"pages/","text":"Pages The layout of the pages can be defined in several ways: by creating a special file on the flash file system, which will be loaded and the layout with the objects displayed each time HASP starts up. by issuing commands through MQTT to draw/change the objects immediately You can create the file wity your favourite text editor and upload it (and other resource assets like fonts) using the web interface HASP Design menu. pages.jsonl The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Note The maximum number of pages and objects is limited by the memory available in the MCU. File comments If any of the required id or obj properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. {\"comment\":\" ----------- Page 1 layout ------------\"} Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. {\"page\":2,\"comment\":\" ---- My Awesome Color Picker Layout ----\"} If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 2 . Example 3: Insert a comment for an object. {\"page\":2,\"id\":3,\"obj\":\"obj\",\"x\":40,\"y\":100,\"w\":160,\"h\":160,\"radius\":100,\"opacity\":100,\"border_opa\":160,\"border_width\":4,\"comment\":\"touch-catcher\"} If the line is not valid json, the parsing of the rest of the file is also stopped. jsonl command See commands documentation for the jsonl command. The payload of the command corresponds to what's exactly in one line of the pages.jsonl file above. Objects Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmpost. Example Objects: {\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":5,\"y\":5,\"h\":50,\"w\":50,\"text\":\"Hello\",\"enabled\":true,\"hidden\":false} {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":5,\"y\":90,\"h\":90,\"w\":50,\"text\":\"World\",\"enabled\":false,\"hidden\":false} Once the object is created, you can reference it with pXbY where X is the page number and Y is the id of the object. For example: p1b1.w=100 p1b2.hidden=true Page number 0 refers to an object visible on all pages. An id of 0 refers to the page itself instead of an object. Tip: If you add the objects on the page 0 last, you ensure that they will be always be visible on top of all other pages. See objects dodumentation for details. Page attributes A page can have the following attributes: prev : The number of the destination page when performing a page prev action on this page next : The number of the destination page when performing a page next action on this page back : The number of the destination page when performing a page back action on this page By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the prev , next and back target pages. For example, to limit cycle through page 1-5 only: on page 5, page next action will jump back to page 1: {\"page\":5,\"id\":0,\"next\":1} The corresponding command is p5b0.next=1 . on page 1, page prev action will go to page 5 (instead of default page 12 on an ESP32) {\"page\":1,\"id\":0,\"prev\":5} The corresponding command is p1b0.prev=5 . Note: Page id p0b0 (as all pages) is not valid to set this attribute as it has to be set on real pages individually. back acts like a level up action, so you can jump back to the home or menu page where you came from using page back . You can create a hierarchy of pages and menus this way. Check out the example for how to implement a simple pagination bar.","title":"Pages"},{"location":"pages/#pagesjsonl","text":"The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Blank lines are allowed for readability and are ignored. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Note The maximum number of pages and objects is limited by the memory available in the MCU.","title":"pages.jsonl"},{"location":"pages/#file-comments","text":"If any of the required id or obj properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. {\"comment\":\" ----------- Page 1 layout ------------\"} Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. {\"page\":2,\"comment\":\" ---- My Awesome Color Picker Layout ----\"} If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 2 . Example 3: Insert a comment for an object. {\"page\":2,\"id\":3,\"obj\":\"obj\",\"x\":40,\"y\":100,\"w\":160,\"h\":160,\"radius\":100,\"opacity\":100,\"border_opa\":160,\"border_width\":4,\"comment\":\"touch-catcher\"} If the line is not valid json, the parsing of the rest of the file is also stopped.","title":"File comments"},{"location":"pages/#jsonl-command","text":"See commands documentation for the jsonl command. The payload of the command corresponds to what's exactly in one line of the pages.jsonl file above.","title":"jsonl command"},{"location":"pages/#objects","text":"Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. So the last drawn object will be the topmpost. Example Objects: {\"page\":1,\"id\":1,\"obj\":\"label\",\"x\":5,\"y\":5,\"h\":50,\"w\":50,\"text\":\"Hello\",\"enabled\":true,\"hidden\":false} {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":5,\"y\":90,\"h\":90,\"w\":50,\"text\":\"World\",\"enabled\":false,\"hidden\":false} Once the object is created, you can reference it with pXbY where X is the page number and Y is the id of the object. For example: p1b1.w=100 p1b2.hidden=true Page number 0 refers to an object visible on all pages. An id of 0 refers to the page itself instead of an object. Tip: If you add the objects on the page 0 last, you ensure that they will be always be visible on top of all other pages. See objects dodumentation for details.","title":"Objects"},{"location":"pages/#page-attributes","text":"A page can have the following attributes: prev : The number of the destination page when performing a page prev action on this page next : The number of the destination page when performing a page next action on this page back : The number of the destination page when performing a page back action on this page By default all pages cycle in a round-robin fashion (after the last page jump back to first), but you can change this behaviour by adjusting the prev , next and back target pages. For example, to limit cycle through page 1-5 only: on page 5, page next action will jump back to page 1: {\"page\":5,\"id\":0,\"next\":1} The corresponding command is p5b0.next=1 . on page 1, page prev action will go to page 5 (instead of default page 12 on an ESP32) {\"page\":1,\"id\":0,\"prev\":5} The corresponding command is p1b0.prev=5 . Note: Page id p0b0 (as all pages) is not valid to set this attribute as it has to be set on real pages individually. back acts like a level up action, so you can jump back to the home or menu page where you came from using page back . You can create a hierarchy of pages and menus this way. Check out the example for how to implement a simple pagination bar.","title":"Page attributes"},{"location":"stm32/","text":"Experimental MCUs Recommended Boards table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3] [D1 mini ESP32][4] [TTGO T7 v1.5 Mini32][5] STM32F407VET/ZGT Black Firmware Download Download Download STM32F407xxT Black Combo There are several cheap STM32F407xx Black boards available on the market with a TFT display header and accompanying 3.2\" ILI9341 FSMC screen (320x240). This hardware is experimental and not fully supported. Selection of STM32F407 boards. Make sure to purchase a compatible screen, preferably from the same vendor. There are multiple FSMC interfaces: e.g. One is marked TFT , another is marked New-TFT and a third has no markings. The pinout of each header & display is different and are not interchangeable! You can however use jumper cables instead, but it won't be plug-and-plug anymore. The following boards are being tested: STM32F407VET6 Black (v2.1) with 512 KB flash STM32F407VET6 Black (v2.0 and v2.1) Purchase Links: AliExpress AliExpress AliExpress (! V2.0 !) Documentation can be found on GitHub STM32F407ZGT6 Black (V3.0) with 1 MB flash STM32F407ZGT6 Black (v3.0) Purchase Link: Documentation can be found on GitHub Attention The STM32F4 boards do not have network connectivity. You can use a compatible network adapter and configure it in PlatformIO. Images of STM32 boards are CC BY-NC 4.0 from https://stm32-base.org/","title":"Stm32"},{"location":"stm32/#experimental-mcus","text":"","title":"Experimental MCUs"},{"location":"stm32/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3] [D1 mini ESP32][4] [TTGO T7 v1.5 Mini32][5] STM32F407VET/ZGT Black Firmware Download Download Download","title":"Recommended Boards"},{"location":"stm32/#stm32f407xxt-black-combo","text":"There are several cheap STM32F407xx Black boards available on the market with a TFT display header and accompanying 3.2\" ILI9341 FSMC screen (320x240). This hardware is experimental and not fully supported. Selection of STM32F407 boards. Make sure to purchase a compatible screen, preferably from the same vendor. There are multiple FSMC interfaces: e.g. One is marked TFT , another is marked New-TFT and a third has no markings. The pinout of each header & display is different and are not interchangeable! You can however use jumper cables instead, but it won't be plug-and-plug anymore. The following boards are being tested:","title":"STM32F407xxT Black Combo"},{"location":"stm32/#stm32f407vet6-black-v21-with-512-kb-flash","text":"STM32F407VET6 Black (v2.0 and v2.1) Purchase Links: AliExpress AliExpress AliExpress (! V2.0 !) Documentation can be found on GitHub","title":"STM32F407VET6 Black (v2.1) with 512 KB flash"},{"location":"stm32/#stm32f407zgt6-black-v30-with-1-mb-flash","text":"STM32F407ZGT6 Black (v3.0) Purchase Link: Documentation can be found on GitHub Attention The STM32F4 boards do not have network connectivity. You can use a compatible network adapter and configure it in PlatformIO. Images of STM32 boards are CC BY-NC 4.0 from https://stm32-base.org/","title":"STM32F407ZGT6 Black (V3.0) with 1 MB flash"},{"location":"styling/","text":"Styling Properties You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex syling, effectively changing its appearance or its sub-components. Boolean Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no Colors Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) {{ read_csv(\"docs/assets/csv/colors.csv\") }} Setting Color Examples: p0b2.value_color=13891 p1b5.text_color=silver p2b3.bg_color=#C042A3 p2b4.border_color=#9f9 Return values When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: {\"color\":\"#00fff6\",\"r\":0,\"g\":255,\"b\":246} General General styling options. Property Value Default Description enabled bool true object is touchable if false a disabled style is applied Background The color and gradient used for drawing the background of an object. Property Type Description bg_opa byte The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop byte Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop byte Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pXb0 where X is the page number. Border The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn. Padding and Margin Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right Shadow The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte Make the shadow larger than the background in every direction by this value Text Properties for textual objects only. Property Type Description text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor byte Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection Value Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int16 Distance between letters of the text, can be a negative number value_line_space int16 Distance between lines of the text, can be a negative number value_align align Alignment of the text. Can be: none, left, right, top, bottom, full or center (=default) value_ofs_x int16 X offset from the original position of the alignment value_ofs_y int16 Y offset from the original position of the alignment Line Properties for line meter objects. Property Type Description line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int16 Width of the line line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_rounded bool true = draw rounded line endings. Default = false Scale The properties for styling the scale of line meter or gauge objects. Property Type Description scale_grad_color color Make gradient to this color on the scale lines scale_end_color color Color of the scale lines in the end region scale_width int16 Width of the scale scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region scale_end_line_width int16 Width of a scale lines in the end region Image Property Type Description image_opa byte Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa byte Specifies opacity of the overlay color mask","title":"Styling"},{"location":"styling/#boolean","text":"Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no","title":"Boolean"},{"location":"styling/#colors","text":"Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) {{ read_csv(\"docs/assets/csv/colors.csv\") }}","title":"Colors"},{"location":"styling/#setting-color","text":"Examples: p0b2.value_color=13891 p1b5.text_color=silver p2b3.bg_color=#C042A3 p2b4.border_color=#9f9","title":"Setting Color"},{"location":"styling/#return-values","text":"When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: {\"color\":\"#00fff6\",\"r\":0,\"g\":255,\"b\":246}","title":"Return values"},{"location":"styling/#general","text":"General styling options. Property Value Default Description enabled bool true object is touchable if false a disabled style is applied","title":"General"},{"location":"styling/#background","text":"The color and gradient used for drawing the background of an object. Property Type Description bg_opa byte The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop byte Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop byte Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pXb0 where X is the page number.","title":"Background"},{"location":"styling/#border","text":"The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn.","title":"Border"},{"location":"styling/#padding-and-margin","text":"Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right","title":"Padding and Margin"},{"location":"styling/#shadow","text":"The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte Make the shadow larger than the background in every direction by this value","title":"Shadow"},{"location":"styling/#text","text":"Properties for textual objects only. Property Type Description text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor byte Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection","title":"Text"},{"location":"styling/#value","text":"Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int16 Distance between letters of the text, can be a negative number value_line_space int16 Distance between lines of the text, can be a negative number value_align align Alignment of the text. Can be: none, left, right, top, bottom, full or center (=default) value_ofs_x int16 X offset from the original position of the alignment value_ofs_y int16 Y offset from the original position of the alignment","title":"Value"},{"location":"styling/#line","text":"Properties for line meter objects. Property Type Description line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int16 Width of the line line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_rounded bool true = draw rounded line endings. Default = false","title":"Line"},{"location":"styling/#scale","text":"The properties for styling the scale of line meter or gauge objects. Property Type Description scale_grad_color color Make gradient to this color on the scale lines scale_end_color color Color of the scale lines in the end region scale_width int16 Width of the scale scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region scale_end_line_width int16 Width of a scale lines in the end region","title":"Scale"},{"location":"styling/#image","text":"Property Type Description image_opa byte Opacity of the image image_recolor color Color of the overlay color mask image_recolor_opa byte Specifies opacity of the overlay color mask","title":"Image"},{"location":"wifi-setup/","text":"Wi-Fi Setup At first boot, when no Wi-Fi setup is found, the device will create an initial Access Point for configuring the device. If the touchscreen is properly connected it will display a QR code, along with a temporary SSID and password, to connect to the device. Either use the touchscreen interface or connect via a web browser to setup the credentials for your local Wi-Fi access point: Using Touchscreen Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct. Using Wi-Fi Access-Point Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN Using Command line You can also directly configure the Wi-Fi settings via the serial console: ssid myAccessPointName pass myWifiPassword reboot To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself. Rename user_config_override-template.h to user_config_override.h , enter your credentials and use flag -DUSE_CONFIG_OVERRIDE when compiling","title":"Wifi setup"},{"location":"wifi-setup/#using-touchscreen","text":"Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct.","title":"Using Touchscreen"},{"location":"wifi-setup/#using-wi-fi-access-point","text":"Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN","title":"Using Wi-Fi Access-Point"},{"location":"wifi-setup/#using-command-line","text":"You can also directly configure the Wi-Fi settings via the serial console: ssid myAccessPointName pass myWifiPassword reboot To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself. Rename user_config_override-template.h to user_config_override.h , enter your credentials and use flag -DUSE_CONFIG_OVERRIDE when compiling","title":"Using Command line"},{"location":"assets/videos/videos/","text":"directory for videos","title":"Videos"},{"location":"configuration/debug/","text":"Debug Settings Web UI With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. Serial Speed Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Syslog Server Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Syslog Port Select to what page the display should switch on startup. Syslog Protocol Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Debug Settings"},{"location":"configuration/debug/#debug-settings","text":"","title":"Debug Settings"},{"location":"configuration/debug/#web-ui","text":"With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp.","title":"Web UI"},{"location":"configuration/debug/#serial-speed","text":"Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme.","title":"Serial Speed"},{"location":"configuration/debug/#syslog-server","text":"Enter the filename of the .jsonl you have uploaded to enables the layout on startup.","title":"Syslog Server"},{"location":"configuration/debug/#syslog-port","text":"Select to what page the display should switch on startup.","title":"Syslog Port"},{"location":"configuration/debug/#syslog-protocol","text":"Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Syslog Protocol"},{"location":"configuration/display/","text":"Display Settings Define the overal settings of the display driver. Web UI Short Idle When the display has not been touched for the Short Idle amount of seconds, an idle = short event will be sent out. Long Idle When the display has not been touched for Long + Short Idle amount of seconds, an idle = long event will be sent out. The Long Idle period begins to count after the Short Idle period. Orientation Rotate the display by the set number of degrees and optionally mirror the display as well. Show Pointer Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected. Backlight Control Sets the GPIO pin which is used for PWM dimming of the backlight. Calibrate Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Display Settings"},{"location":"configuration/display/#display-settings","text":"Define the overal settings of the display driver.","title":"Display Settings"},{"location":"configuration/display/#web-ui","text":"","title":"Web UI"},{"location":"configuration/display/#short-idle","text":"When the display has not been touched for the Short Idle amount of seconds, an idle = short event will be sent out.","title":"Short Idle"},{"location":"configuration/display/#long-idle","text":"When the display has not been touched for Long + Short Idle amount of seconds, an idle = long event will be sent out. The Long Idle period begins to count after the Short Idle period.","title":"Long Idle"},{"location":"configuration/display/#orientation","text":"Rotate the display by the set number of degrees and optionally mirror the display as well.","title":"Orientation"},{"location":"configuration/display/#show-pointer","text":"Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected.","title":"Show Pointer"},{"location":"configuration/display/#backlight-control","text":"Sets the GPIO pin which is used for PWM dimming of the backlight.","title":"Backlight Control"},{"location":"configuration/display/#calibrate","text":"Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Calibrate"},{"location":"configuration/gpio/","text":"GPIO Settings You can attach external devices like buttons, switches, relays or LEDs using the GPIO pins of the ESP. Web UI Pin Select the pin of the gpio to use. Pins known to be in use will be hidden from this list. Check the documentation of your board to see which pins are free to be used as gpio. Groupid GPIOs and objects can be grouped together by specifying a groupid. The state of objects is then altered by any object in the same group. This allows for simple action-reaction scenarios without relying on a home automation system: Link a switch and relay together Link a push button and doorbell together The applied value is normalized and proportionate to the value of the input object, much like a percentage: Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values. Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current min , max and val attributes. Note The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together. Default state The polarity of the gpio when it is not being engaged i.e. the gpio is not connected, zero or idle: HIGH : The default state is high using the internal PULL_UP resistor. LOW : The default state is low using the internal PULL_DOWN resistor. Types Button A button gpio sends events to topic input# where # is the groupnumber. GPIO buttons send out events while they occur. The possible events are: down : Occurs when a button goes from depressed to pressed up : The button was released within a short time i.e. a short click has occurred long : A single LONG event is send when the button is still being pressed after the threshold time of 400ms release : The button is released after being pressing for a LONG threshold time. The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released. Switch A switch gpio sends events to input# where # is the groupnumber. GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}. The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off. Relay Set the relay ON or OFF when an event is received on output# where # is the groupnumber or from another group intput . When a relay is grouped with a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch. When a relay is controlled by a range object (slider, arc slider, roller, drop-down list) within the same group, the state will be be ON if the .val value is halfway the range or above. Warning Attaching devices to mains power can be dangerous! Configuring gpios is done on your own responsibility . Be sure to test any system thoroughly using low voltages first. Led Set the brightness of the LED between 0 and 255 when a value is received on output# where # is the groupnumber. When a led is controlled by a button or switch in the same group, it will be turned ON or off according to the state of the button or switch. When a led is controlled by a range object (slider, arc slider, roller, drop-down list) in the same group, the brightness will be proportional to the .val value of the object within its range ( min-max ). For example: Consider a roller or drop-down list with 4 options: OFF , Low , Medium and High . The .val values can range from 0 to 3. These will set the brightness of the led to 0 (0%), 84 (33%), 170 (66%) and 255 (100%) respectively. For a roller or drop-down list with 5 options, .val ranges between 0 and 4. The brightness of the led increases 25% with each step. PWM Set the duty cycle of the pin between 0 and 4095 when a value is received on output# where # is the groupnumber or from another group intput . When the PWM gpio is grouped with a button or switch, its duty cycle is either set to full-duty or off according to the state of the button or switch. When the PWM gpio is grouped with range object (slider, arc slider, roller, drop-down list), the duty cycle is proportional to the .val value of the object within its range ( min-max ). Idle State The GPIO pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state. If you want a GPIO pin to wakeup the device, you should monitor its mqtt topic and use the wakeup , dim and light commands appropriately. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Gpio"},{"location":"configuration/gpio/#web-ui","text":"","title":"Web UI"},{"location":"configuration/gpio/#pin","text":"Select the pin of the gpio to use. Pins known to be in use will be hidden from this list. Check the documentation of your board to see which pins are free to be used as gpio.","title":"Pin"},{"location":"configuration/gpio/#groupid","text":"GPIOs and objects can be grouped together by specifying a groupid. The state of objects is then altered by any object in the same group. This allows for simple action-reaction scenarios without relying on a home automation system: Link a switch and relay together Link a push button and doorbell together The applied value is normalized and proportionate to the value of the input object, much like a percentage: Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values. Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current min , max and val attributes. Note The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together.","title":"Groupid"},{"location":"configuration/gpio/#default-state","text":"The polarity of the gpio when it is not being engaged i.e. the gpio is not connected, zero or idle: HIGH : The default state is high using the internal PULL_UP resistor. LOW : The default state is low using the internal PULL_DOWN resistor.","title":"Default state"},{"location":"configuration/gpio/#types","text":"","title":"Types"},{"location":"configuration/gpio/#button","text":"A button gpio sends events to topic input# where # is the groupnumber. GPIO buttons send out events while they occur. The possible events are: down : Occurs when a button goes from depressed to pressed up : The button was released within a short time i.e. a short click has occurred long : A single LONG event is send when the button is still being pressed after the threshold time of 400ms release : The button is released after being pressing for a LONG threshold time. The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released.","title":"Button"},{"location":"configuration/gpio/#switch","text":"A switch gpio sends events to input# where # is the groupnumber. GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}. The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off.","title":"Switch"},{"location":"configuration/gpio/#relay","text":"Set the relay ON or OFF when an event is received on output# where # is the groupnumber or from another group intput . When a relay is grouped with a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch. When a relay is controlled by a range object (slider, arc slider, roller, drop-down list) within the same group, the state will be be ON if the .val value is halfway the range or above. Warning Attaching devices to mains power can be dangerous! Configuring gpios is done on your own responsibility . Be sure to test any system thoroughly using low voltages first.","title":"Relay"},{"location":"configuration/gpio/#led","text":"Set the brightness of the LED between 0 and 255 when a value is received on output# where # is the groupnumber. When a led is controlled by a button or switch in the same group, it will be turned ON or off according to the state of the button or switch. When a led is controlled by a range object (slider, arc slider, roller, drop-down list) in the same group, the brightness will be proportional to the .val value of the object within its range ( min-max ). For example: Consider a roller or drop-down list with 4 options: OFF , Low , Medium and High . The .val values can range from 0 to 3. These will set the brightness of the led to 0 (0%), 84 (33%), 170 (66%) and 255 (100%) respectively. For a roller or drop-down list with 5 options, .val ranges between 0 and 4. The brightness of the led increases 25% with each step.","title":"Led"},{"location":"configuration/gpio/#pwm","text":"Set the duty cycle of the pin between 0 and 4095 when a value is received on output# where # is the groupnumber or from another group intput . When the PWM gpio is grouped with a button or switch, its duty cycle is either set to full-duty or off according to the state of the button or switch. When the PWM gpio is grouped with range object (slider, arc slider, roller, drop-down list), the duty cycle is proportional to the .val value of the object within its range ( min-max ).","title":"PWM"},{"location":"configuration/gpio/#idle-state","text":"The GPIO pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state. If you want a GPIO pin to wakeup the device, you should monitor its mqtt topic and use the wakeup , dim and light commands appropriately. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Idle State"},{"location":"configuration/hasp/","text":"HASP Settings You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color. Web UI Upload With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. UI Theme and Hue Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Startup layout Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Startup Page Select to what page the display should switch on startup. Startup brightness Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"HASP Settings"},{"location":"configuration/hasp/#hasp-settings","text":"You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color.","title":"HASP Settings"},{"location":"configuration/hasp/#web-ui","text":"","title":"Web UI"},{"location":"configuration/hasp/#upload","text":"With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp.","title":"Upload"},{"location":"configuration/hasp/#ui-theme-and-hue","text":"Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme.","title":"UI Theme and Hue"},{"location":"configuration/hasp/#startup-layout","text":"Enter the filename of the .jsonl you have uploaded to enables the layout on startup.","title":"Startup layout"},{"location":"configuration/hasp/#startup-page","text":"Select to what page the display should switch on startup.","title":"Startup Page"},{"location":"configuration/hasp/#startup-brightness","text":"Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Startup brightness"},{"location":"configuration/http/","text":"HTTP Settings To restrict access to the web user interface you can set a Username and Password. Web UI Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"HTTP Settings"},{"location":"configuration/http/#http-settings","text":"To restrict access to the web user interface you can set a Username and Password.","title":"HTTP Settings"},{"location":"configuration/http/#web-ui","text":"Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"Web UI"},{"location":"configuration/mqtt/","text":"MQTT Settings All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. Learn more about the protocol on MQTT Essentials Web UI HASP Node Name The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/ Group Name The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic. MQTT Broker Set the IP or hostname of your MQTT Broker MQTT Port Set the port for your MQTT Broker MQTT User and Password Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline You can also configure the mqtt settings via the serial or telnet console: hostname myPlateName mqtthost 192.168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"MQTT Settings"},{"location":"configuration/mqtt/#mqtt-settings","text":"All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. Learn more about the protocol on MQTT Essentials","title":"MQTT Settings"},{"location":"configuration/mqtt/#web-ui","text":"","title":"Web UI"},{"location":"configuration/mqtt/#hasp-node-name","text":"The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/","title":"HASP Node Name"},{"location":"configuration/mqtt/#group-name","text":"The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic.","title":"Group Name"},{"location":"configuration/mqtt/#mqtt-broker","text":"Set the IP or hostname of your MQTT Broker","title":"MQTT Broker"},{"location":"configuration/mqtt/#mqtt-port","text":"Set the port for your MQTT Broker","title":"MQTT Port"},{"location":"configuration/mqtt/#mqtt-user-and-password","text":"Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"MQTT User and Password"},{"location":"configuration/mqtt/#commandline","text":"You can also configure the mqtt settings via the serial or telnet console: hostname myPlateName mqtthost 192.168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"Commandline"},{"location":"configuration/wifi/","text":"Wifi Settings When using a wireless network adapter, you need to configure the SSID to connect. Web UI SSID The name of the access point to connect to. Password Optional password for the access point, if required. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline You can also configure the wifi settings via the serial or telnet console: ssid myAccessPointName pass myWifiPassword reboot","title":"Wifi Settings"},{"location":"configuration/wifi/#wifi-settings","text":"When using a wireless network adapter, you need to configure the SSID to connect.","title":"Wifi Settings"},{"location":"configuration/wifi/#web-ui","text":"","title":"Web UI"},{"location":"configuration/wifi/#ssid","text":"The name of the access point to connect to.","title":"SSID"},{"location":"configuration/wifi/#password","text":"Optional password for the access point, if required. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Password"},{"location":"configuration/wifi/#commandline","text":"You can also configure the wifi settings via the serial or telnet console: ssid myAccessPointName pass myWifiPassword reboot","title":"Commandline"},{"location":"custom-component/howto/","text":"The openHASP Custom Component simplifies synchronization of objects on one or more openHASP plates with Home Assistant entities. You need to download it and install it in Home Assistant manually. Installation Using the tool of choice open the directory (folder) for your HA configuration (where you find configuration.yaml ). If you do not have a custom_components directory there, you need to create it. In the custom_components directory create a new folder called openhasp . Download all the files from the custom_components/openhasp/ directory in this repository. Place the files you downloaded in the new directory you created. Edit your configuration.yaml file add an entry similar to the example below. Restart Home Assistant Using your Home Assustant configuration directory as a starting point you should now also have this: custom_components/openhasp/__init__.py custom_components/openhasp/common.py custom_components/openhasp/const.py custom_components/openhasp/light.json custom_components/openhasp/manifest.json custom_components/openhasp/services.yaml We call plate any device running openHASP in your system. Make sure you have your plates connected to the network and each of them has a unique MQTT topic. Static DHCP or fixed IP are not needed as communication only happes through MQTT. Configuration Example To add an openHASP plate to your installation with a sample configuration, upload a pages.jsonl file with the folowing content to your plate first: {\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"openHASP\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":26,\"mode\":\"break\",\"align\":1} {\"page\":1,\"id\":3,\"obj\":\"dropdown\",\"x\":10,\"y\":130,\"w\":160,\"h\":30,\"options\":\"Apples\\nBananas\\nOranges\\nMelon\"} {\"page\":0,\"id\":1,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00.0\u00b0C\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} Assuming your plate's configured MQTT topic is plate35 , you can add the following to your configuration.yaml file: openhasp: plate_my_room: topic: \"hasp/plate35\" path: \"/config/openhasp/pages_my_room.jsonl\" idle_brightness: 35 objects: - obj: \"p0b1\" # temperature label on all pages properties: \"text\": '{{ states(\"sensor.my_room_temperature\") }}\u00b0C' - obj: \"p1b2\" # light-switch toggle button properties: \"val\": '{{ 1 if states(\"light.my_room\") == \"on\" else 0 }}' \"text\": '{{ \"\\uE6E8\" if is_state(\"light.my_room\", \"on\") else \"\\uE335\" | e }}' event: \"up\": - service: homeassistant.toggle entity_id: \"light.my_room\" - obj: \"p1b3\" # dropdown event: \"changed\": - service: persistent_notification.create data: message: I like {{ text }} Variable definitions openhasp: (Required) The platform identifier. Required once in the configuration, this will activate the custom component. plate_my_room: (Required) Your plate identifier. For each plate in your sytem, such an entry is required, has to be unique. topic: (string) (Required) The MQTT topic your plate is configured with. path: (path) (Optional) Path to a pages.jsonl file containing design for this plate, to be loaded on Home Assistant start and on plate availability (becoming online). Note: Don't upload any pages.jsonl file to the plate's flash memory at all! This assumes your plate pages are empty at boot. Checkout the services section for requirements to use this. idle_brightness: (int) (Optional) The brightness of the screen when idle (before long idle). Numeric value between 1 and 255. Default 25. objects: (Optional) Definition of the objects reacting to changes in Home Assistant, or generating events for Home Assistant. obj: (string) (Required) The object identifier which we want to integrate with Home Assistant. Its name has the form pXbY where X represents the page where the object is located, and Y represents the id of the object on that page. properties: (Optional) List containing the properties of the object which we want to modify based on changes occurring in Home Assistant. In the example above text property gets updated whenever sensor.my_room_temperature changes. event: (Optional) List containing the events generated by the object when touched on the screen. These are object-specific and can be observed accurately with an MQTT client. Each event defines a list of services which will be processed in order (like actions list in an automation). In the example above, when object p1b2 (which is a toggle button) generates the on event, light.my_room will be turned on by the service call light.turn_on as specified in the event config. And similarily when off event comes through MQTT, the light will be turned off by the corresponding service call. Note: Any variable coming from the MQTT message can be used between curly brackets and passed to the service call. In the example above when object p1b3 (which is a dropdown selector) generates the changed event, a persistent notification will appear in Home Assistant's Lovelace interface containing the selected text from the object, which was passed over from the MQTT message. See object events for more types of generated events. Configuration tips Multiple plates If you have multiple plates you can add them all using different plate identifiers. Their configured topics have to be unique too: openhasp: plate_my_room_1: topic: \"hasp/plate1\" objects: ... plate_my_room_2: topic: \"hasp/plate2\" objects: ... plate_my_room_3: topic: \"hasp/plate3\" objects: ... Split configuration You can use Home Assistant's split configuration to help better organizing your config files. Instead of keeping the configuration of all openHASP plates in Home Assistant's main config file, you can keep openHASP config separately, by adding only this to configuration.yaml : openhasp: !include openhasp.yaml After this, you can move your openHASP configuration starting with plate_my_room: level to your separate openhasp.yaml file and restart Home Assistant. Moreover, if you have multiple plates, you can keep each one in a separate config file, to achieve this, make it like: openhasp: !include_dir_merge_named openhasp_configs/ Create a directory openhasp_configs right near configuration.yaml , and put in it all your plates configuration (only with plate_my_room: level) in separate yaml files and restart Home Assistant. This component implements some specific services to make interactions with the plate even more comfortable. Services openhasp.wakeup Wakes up the display when an external event has occurred, like a presence or a PIR motion sensor. openhasp.next_page Changes plate to the next page. openhasp.prev_page Changes plate to the previous page. openhasp.change_page Changes plate directly to the specified page number. openhasp.clear_page Clears the contents of the specified page number. If page number not specified, clears all the pages. openhasp.load_pages Loads new design from pages.jsonl file from full path . The file must be located in an authorised location defined by allowlist_external_dirs (in case of hassio /config/ is the directory where Home Assistant's configuration.yaml resides, so in case of a subdirectory called openhasp the full path would be e.g. /config/openhasp/pages.jsonl , and you need to add /config/openhasp/ to your allowlist_external_dirs ). Important: the contents of the file are loaded line by line thus \"page\":X has to be defined for each object. Unless you clear the page first, the objects will be updated. Check out the example automations for further information on how to use the services within Home Assistant.","title":"Howto"},{"location":"custom-component/howto/#installation","text":"Using the tool of choice open the directory (folder) for your HA configuration (where you find configuration.yaml ). If you do not have a custom_components directory there, you need to create it. In the custom_components directory create a new folder called openhasp . Download all the files from the custom_components/openhasp/ directory in this repository. Place the files you downloaded in the new directory you created. Edit your configuration.yaml file add an entry similar to the example below. Restart Home Assistant Using your Home Assustant configuration directory as a starting point you should now also have this: custom_components/openhasp/__init__.py custom_components/openhasp/common.py custom_components/openhasp/const.py custom_components/openhasp/light.json custom_components/openhasp/manifest.json custom_components/openhasp/services.yaml We call plate any device running openHASP in your system. Make sure you have your plates connected to the network and each of them has a unique MQTT topic. Static DHCP or fixed IP are not needed as communication only happes through MQTT.","title":"Installation"},{"location":"custom-component/howto/#configuration","text":"","title":"Configuration"},{"location":"custom-component/howto/#example","text":"To add an openHASP plate to your installation with a sample configuration, upload a pages.jsonl file with the folowing content to your plate first: {\"page\":1,\"id\":1,\"obj\":\"btn\",\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"openHASP\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":26,\"mode\":\"break\",\"align\":1} {\"page\":1,\"id\":3,\"obj\":\"dropdown\",\"x\":10,\"y\":130,\"w\":160,\"h\":30,\"options\":\"Apples\\nBananas\\nOranges\\nMelon\"} {\"page\":0,\"id\":1,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00.0\u00b0C\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} Assuming your plate's configured MQTT topic is plate35 , you can add the following to your configuration.yaml file: openhasp: plate_my_room: topic: \"hasp/plate35\" path: \"/config/openhasp/pages_my_room.jsonl\" idle_brightness: 35 objects: - obj: \"p0b1\" # temperature label on all pages properties: \"text\": '{{ states(\"sensor.my_room_temperature\") }}\u00b0C' - obj: \"p1b2\" # light-switch toggle button properties: \"val\": '{{ 1 if states(\"light.my_room\") == \"on\" else 0 }}' \"text\": '{{ \"\\uE6E8\" if is_state(\"light.my_room\", \"on\") else \"\\uE335\" | e }}' event: \"up\": - service: homeassistant.toggle entity_id: \"light.my_room\" - obj: \"p1b3\" # dropdown event: \"changed\": - service: persistent_notification.create data: message: I like {{ text }}","title":"Example"},{"location":"custom-component/howto/#variable-definitions","text":"openhasp: (Required) The platform identifier. Required once in the configuration, this will activate the custom component. plate_my_room: (Required) Your plate identifier. For each plate in your sytem, such an entry is required, has to be unique. topic: (string) (Required) The MQTT topic your plate is configured with. path: (path) (Optional) Path to a pages.jsonl file containing design for this plate, to be loaded on Home Assistant start and on plate availability (becoming online). Note: Don't upload any pages.jsonl file to the plate's flash memory at all! This assumes your plate pages are empty at boot. Checkout the services section for requirements to use this. idle_brightness: (int) (Optional) The brightness of the screen when idle (before long idle). Numeric value between 1 and 255. Default 25. objects: (Optional) Definition of the objects reacting to changes in Home Assistant, or generating events for Home Assistant. obj: (string) (Required) The object identifier which we want to integrate with Home Assistant. Its name has the form pXbY where X represents the page where the object is located, and Y represents the id of the object on that page. properties: (Optional) List containing the properties of the object which we want to modify based on changes occurring in Home Assistant. In the example above text property gets updated whenever sensor.my_room_temperature changes. event: (Optional) List containing the events generated by the object when touched on the screen. These are object-specific and can be observed accurately with an MQTT client. Each event defines a list of services which will be processed in order (like actions list in an automation). In the example above, when object p1b2 (which is a toggle button) generates the on event, light.my_room will be turned on by the service call light.turn_on as specified in the event config. And similarily when off event comes through MQTT, the light will be turned off by the corresponding service call. Note: Any variable coming from the MQTT message can be used between curly brackets and passed to the service call. In the example above when object p1b3 (which is a dropdown selector) generates the changed event, a persistent notification will appear in Home Assistant's Lovelace interface containing the selected text from the object, which was passed over from the MQTT message. See object events for more types of generated events.","title":"Variable definitions"},{"location":"custom-component/howto/#configuration-tips","text":"","title":"Configuration tips"},{"location":"custom-component/howto/#multiple-plates","text":"If you have multiple plates you can add them all using different plate identifiers. Their configured topics have to be unique too: openhasp: plate_my_room_1: topic: \"hasp/plate1\" objects: ... plate_my_room_2: topic: \"hasp/plate2\" objects: ... plate_my_room_3: topic: \"hasp/plate3\" objects: ...","title":"Multiple plates"},{"location":"custom-component/howto/#split-configuration","text":"You can use Home Assistant's split configuration to help better organizing your config files. Instead of keeping the configuration of all openHASP plates in Home Assistant's main config file, you can keep openHASP config separately, by adding only this to configuration.yaml : openhasp: !include openhasp.yaml After this, you can move your openHASP configuration starting with plate_my_room: level to your separate openhasp.yaml file and restart Home Assistant. Moreover, if you have multiple plates, you can keep each one in a separate config file, to achieve this, make it like: openhasp: !include_dir_merge_named openhasp_configs/ Create a directory openhasp_configs right near configuration.yaml , and put in it all your plates configuration (only with plate_my_room: level) in separate yaml files and restart Home Assistant. This component implements some specific services to make interactions with the plate even more comfortable.","title":"Split configuration"},{"location":"custom-component/howto/#services","text":"openhasp.wakeup Wakes up the display when an external event has occurred, like a presence or a PIR motion sensor. openhasp.next_page Changes plate to the next page. openhasp.prev_page Changes plate to the previous page. openhasp.change_page Changes plate directly to the specified page number. openhasp.clear_page Clears the contents of the specified page number. If page number not specified, clears all the pages. openhasp.load_pages Loads new design from pages.jsonl file from full path . The file must be located in an authorised location defined by allowlist_external_dirs (in case of hassio /config/ is the directory where Home Assistant's configuration.yaml resides, so in case of a subdirectory called openhasp the full path would be e.g. /config/openhasp/pages.jsonl , and you need to add /config/openhasp/ to your allowlist_external_dirs ). Important: the contents of the file are loaded line by line thus \"page\":X has to be defined for each object. Unless you clear the page first, the objects will be updated. Check out the example automations for further information on how to use the services within Home Assistant.","title":"Services"},{"location":"custom-component/sampl_autom/","text":"Turn on moodlight when backlight off (and vice-versa) If your plate has moodlights, it is useful in dark situations, when you don't want to have the screen backlit on all the time, but have the mood light on instead. The night mode activates when sun goes down, and the day mode activates when the sun comes up. During the day mood light doesn't light, screen is on all the time but dimmed. Tested on Lanbon L8 and firmware 0.4.0. Put your light.plate_my_room_moodlight to a Lovelace card entity row and select a nice color for moodlight. Assuming your plate's configured MQTT node or group topic is plate35 , add your automations: - id: openhasp-moodlight-on alias: \"openHASP Moodlight ON when Backlight OFF\" trigger: - platform: state entity_id: light.openhasp_plate_my_room_backlight from: 'on' to: 'off' action: - service: light.turn_on target: entity_id: light.openhasp_plate_my_room_moodlight - id: openhasp-moodlight-off alias: \"openHASP Moodlight OFF when Backlight ON\" trigger: - platform: state entity_id: light.openhasp_plate_my_room_backlight from: 'off' to: 'on' action: - service: light.turn_off target: entity_id: light.openhasp_plate_my_room_moodlight - id: openhasp-night alias: \"openHASP Night mode\" trigger: - platform: numeric_state entity_id: sun.sun attribute: elevation below: -1 condition: - condition: template value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action: - service: mqtt.publish data: topic: hasp/plate35/config/gui payload: '{\"idle2\":120}' - id: openhasp-day alias: \"openHASP Day mode\" trigger: - platform: numeric_state entity_id: sun.sun attribute: elevation above: 1 condition: - condition: template value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action: - service: mqtt.publish data: topic: hasp/plate35/config/gui payload: '{\"idle2\":0}' Note the condition which assures to avoid triggering the automations falsely when Home Assistant (re)starts (allows running the automation only when Home Assistant has been up for at least 2 minutes). Return to home page after some idle time Apart from the idle times controlling backlight levels, one may want to return to page 1 after a while. - id: openhasp-back-to-page-1 alias: \"openHASP back to page 1\" trigger: - platform: template value_template: \"{{ state_attr('openhasp.plate_my_room','idle') != 'off' }}\" for: \"00:05:00\" condition: - condition: template value_template: \"{{ states('openhasp.plate_my_room') != '1' and states('openhasp.plate_my_room') != 'unavailable' }}\" action: - service: openhasp.change_page target: entity_id: openhasp.plate_my_room data: page: 1 Reload design pages from Home Assistant configuration directory It's possible to store the pages.jsonl plate design configuration files in a central location, namely your Home Assistant server. Practically you can do this by creating a directory where your configuration.yaml resides, say hasp-lvgl and you can drop your pages.jsonl files there for all your plates. You need to allow Home Assistant components to access this directory, this can be done in configuration.yaml with this directive (in case of hassio looks like this) : homeassistant: allowlist_external_dirs: - /config/openhasp/ With the services openhasp.clear_page and openhasp.load_pages you can clear one or all the pages of your plate, and reload their configuration from the server, respectively. For the example automation below i've created an input_boolean named load_pages_plate_my_room in order to have a switch in Lovelace UI to trigger this manually. - id: openhasp-reload_pages alias: \"openHASP reload pages\" trigger: - platform: state entity_id: input_boolean.load_pages_plate_my_room from: 'off' to: 'on' action: - service: openhasp.clear_page data: page: 1 target: entity_id: openhasp.plate_my_room - service: hasp_lvgl.load_pages data: path: /config/openhasp/pages_my_room_v1.jsonl target: entity_id: openhasp.plate_my_room - service: input_boolean.turn_off data: entity_id: input_boolean.load_pages_plate_my_room If you omit the openhasp.clear_page service completely, the objects will be updated. It's important to know that they have to remain the same type (e.g. you can't update from a label type object to a button type object. If you need a change, you need to clear first.) If you omit lines data: and page: 1 , all pages will be cleared. To trigger this automation when Home Assistant starts, you can use this in your automation: trigger: - platform: homeassistant event: start Note: You can also use the path directive in the component config to load the design configuration at Home Assistant start, but that won't clear the existing pages (it assumes the pages are empty). Prevent burn-in of the LCD screen You can use this to protect and prolonge the lifetime of the LCD screens, thus being more green and generating less hazardous waste. Wall mounted LCD screns main problem is that they display the same picture 99.999% of the time. Even if somebody turns off backlight during the night or dark periods, the LCD screen keeps showing the same picture, seen by nobody. There are high chances that this will lead to screen picture burn-in after a few years of operation. Pixel training One way to reduce this is to \"train\" the pixels periodically with completely different other content. Assuming your group name is configured as plates in your 240x320 screens running openHASP, here is a possible solution to extend their life (all at once). The first automation runs for 1 minute by cycling an overlay with a full-screen base object every second through white, red, green, blue and black. It starts and remains turned off at Home Assistant start, to run it you need to turn it on using the service automation.turn_on . - id: openhasp_antiburn alias: \"openHASP anti burn-in screen protection\" initial_state: false trigger: platform: state entity_id: automation.openhasp_anti_burn_in_screen_protection from: 'off' to: 'on' action: - service: mqtt.publish data: topic: hasp/plates/command/jsonl payload: '{\"page\":0,\"id\":99,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"hidden\":0,\"bg_grad_dir\":0,\"bg_color\":\"white\"}' - repeat: while: - condition: template value_template: '{{ repeat.index <= 12 }}' sequence: - service: mqtt.publish data: topic: hasp/plates/command/p0b99.bg_color payload: 'white' - delay: '00:00:01' - service: mqtt.publish data: topic: hasp/plates/command/p0b99.bg_color payload: 'red' - delay: '00:00:01' - service: mqtt.publish data: topic: hasp/plates/command/p0b99.bg_color payload: 'green' - delay: '00:00:01' - service: mqtt.publish data: topic: hasp/plates/command/p0b99.bg_color payload: 'blue' - delay: '00:00:01' - service: mqtt.publish data: topic: hasp/plates/command/p0b99.bg_color payload: 'black' - delay: '00:00:01' - service: mqtt.publish data: topic: hasp/plates/command/p0b99.delete payload: '' - service: automation.turn_off target: entity_id: automation.openhasp_anti_burn_in_screen_protection The second automation takes care to stop the looping colors when you touch the screen: - id: openhasp_antiburn_touch_stop alias: \"openHASP anti-burn-in stop when touched\" initial_state: 'on' mode: restart trigger: - platform: mqtt topic: 'hasp/+/state/p0b99' payload: '{\"event\":\"down\"}' - platform: mqtt topic: 'hasp/+/LWT' payload: \"online\" action: - service: automation.turn_off target: entity_id: automation.openhasp_anti_burn_in_screen_protection - service: mqtt.publish data: topic: hasp/plates/command/p0b99.delete payload: '' The third automation simply runs the first automation at 3 different times every night: - id: openhasp_antiburn_start_at_night alias: \"openHASP anti-burn-in start at night\" initial_state: 'on' trigger: - platform: time at: '00:20:00' - platform: time at: '02:20:00' - platform: time at: '04:20:00' action: - service: automation.turn_on target: entity_id: automation.openhasp_anti_burn_in_screen_protection Clear pixels when backlight off Another way to reduce the chance of burn-in is to clear the contents of the screen while the backlight is turned off, as nobody sees the pixels anyway. Just add these actions to the first automation example which draw an overlay with a black base object on page 0 when display is off, and deletes it when comes back on: for automation openhasp-moodlight-on , add to actions: - service: mqtt.publish data: topic: hasp/plates/command/jsonl payload: '{\"page\":0,\"id\":99,\"obj\":\"obj\",\"x\":0,\"y\":0,\"w\":240,\"h\":320,\"radius\":0,\"hidden\":0,\"bg_grad_dir\":0,\"bg_color\":\"black\"}' for automation openhasp-moodlight-off , add to actions: - service: automation.turn_off target: entity_id: automation.openhasp_anti_burn_in_screen_protection - service: mqtt.publish data: topic: hasp/plates/command/p0b99.hidden payload: '1' - service: mqtt.publish data: topic: hasp/plates/command/p0b99.delete payload: '' Both methods can coexist. Don't forget to adjust the size of the object to your screen if it's not 240x320.","title":"Sampl autom"},{"location":"custom-component/sampl_autom/#turn-on-moodlight-when-backlight-off-and-vice-versa","text":"If your plate has moodlights, it is useful in dark situations, when you don't want to have the screen backlit on all the time, but have the mood light on instead. The night mode activates when sun goes down, and the day mode activates when the sun comes up. During the day mood light doesn't light, screen is on all the time but dimmed. Tested on Lanbon L8 and firmware 0.4.0. Put your light.plate_my_room_moodlight to a Lovelace card entity row and select a nice color for moodlight. Assuming your plate's configured MQTT node or group topic is plate35 , add your automations: - id: openhasp-moodlight-on alias: \"openHASP Moodlight ON when Backlight OFF\" trigger: - platform: state entity_id: light.openhasp_plate_my_room_backlight from: 'on' to: 'off' action: - service: light.turn_on target: entity_id: light.openhasp_plate_my_room_moodlight - id: openhasp-moodlight-off alias: \"openHASP Moodlight OFF when Backlight ON\" trigger: - platform: state entity_id: light.openhasp_plate_my_room_backlight from: 'off' to: 'on' action: - service: light.turn_off target: entity_id: light.openhasp_plate_my_room_moodlight - id: openhasp-night alias: \"openHASP Night mode\" trigger: - platform: numeric_state entity_id: sun.sun attribute: elevation below: -1 condition: - condition: template value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action: - service: mqtt.publish data: topic: hasp/plate35/config/gui payload: '{\"idle2\":120}' - id: openhasp-day alias: \"openHASP Day mode\" trigger: - platform: numeric_state entity_id: sun.sun attribute: elevation above: 1 condition: - condition: template value_template: \"{{ (as_timestamp(now()) - as_timestamp(states('sensor.ha_uptime_moment'))) / 60 > 2 }}\" action: - service: mqtt.publish data: topic: hasp/plate35/config/gui payload: '{\"idle2\":0}' Note the condition which assures to avoid triggering the automations falsely when Home Assistant (re)starts (allows running the automation only when Home Assistant has been up for at least 2 minutes).","title":"Turn on moodlight when backlight off (and vice-versa)"},{"location":"custom-component/sampl_autom/#return-to-home-page-after-some-idle-time","text":"Apart from the idle times controlling backlight levels, one may want to return to page 1 after a while. - id: openhasp-back-to-page-1 alias: \"openHASP back to page 1\" trigger: - platform: template value_template: \"{{ state_attr('openhasp.plate_my_room','idle') != 'off' }}\" for: \"00:05:00\" condition: - condition: template value_template: \"{{ states('openhasp.plate_my_room') != '1' and states('openhasp.plate_my_room') != 'unavailable' }}\" action: - service: openhasp.change_page target: entity_id: openhasp.plate_my_room data: page: 1","title":"Return to home page after some idle time"},{"location":"custom-component/sampl_autom/#reload-design-pages-from-home-assistant-configuration-directory","text":"It's possible to store the pages.jsonl plate design configuration files in a central location, namely your Home Assistant server. Practically you can do this by creating a directory where your configuration.yaml resides, say hasp-lvgl and you can drop your pages.jsonl files there for all your plates. You need to allow Home Assistant components to access this directory, this can be done in configuration.yaml with this directive (in case of hassio looks like this) : homeassistant: allowlist_external_dirs: - /config/openhasp/ With the services openhasp.clear_page and openhasp.load_pages you can clear one or all the pages of your plate, and reload their configuration from the server, respectively. For the example automation below i've created an input_boolean named load_pages_plate_my_room in order to have a switch in Lovelace UI to trigger this manually. - id: openhasp-reload_pages alias: \"openHASP reload pages\" trigger: - platform: state entity_id: input_boolean.load_pages_plate_my_room from: 'off' to: 'on' action: - service: openhasp.clear_page data: page: 1 target: entity_id: openhasp.plate_my_room - service: hasp_lvgl.load_pages data: path: /config/openhasp/pages_my_room_v1.jsonl target: entity_id: openhasp.plate_my_room - service: input_boolean.turn_off data: entity_id: input_boolean.load_pages_plate_my_room If you omit the openhasp.clear_page service completely, the objects will be updated. It's important to know that they have to remain the same type (e.g. you can't update from a label type object to a button type object. If you need a change, you need to clear first.) If you omit lines data: and page: 1 , all pages will be cleared. To trigger this automation when Home Assistant starts, you can use this in your automation: trigger: - platform: homeassistant event: start Note: You can also use the path directive in the component config to load the design configuration at Home Assistant start, but that won't clear the existing pages (it assumes the pages are empty).","title":"Reload design pages from Home Assistant configuration directory"},{"location":"custom-component/sampl_autom/#prevent-burn-in-of-the-lcd-screen","text":"You can use this to protect and prolonge the lifetime of the LCD screens, thus being more green and generating less hazardous waste. Wall mounted LCD screns main problem is that they display the same picture 99.999% of the time. Even if somebody turns off backlight during the night or dark periods, the LCD screen keeps showing the same picture, seen by nobody. There are high chances that this will lead to screen picture burn-in after a few years of operation.","title":"Prevent burn-in of the LCD screen"},{"location":"custom-component/sampl_conf/","text":"Display clock and temperature The easiest example is to display the state of a clock and a temperature sensor from Home Assistant, using label objects in openHASP. Create a label object to display the temperature value, a separate label object to display the unit and a third label object for the clock: {\"page\":0,\"id\":4,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":45,\"text\":\"00.0\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} {\"page\":0,\"id\":5,\"obj\":\"label\",\"x\":220,\"y\":5,\"h\":30,\"w\":45,\"text\":\"\u00b0C\",\"align\":0,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} {\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"align\":0,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} In component configuration all you need for the objects is: objects: - obj: \"p0b4\" properties: \"text\": \"{{ states('sensor.my_room_temperature') }}\" - obj: \"p0b6\" properties: \"text\": \"{{ states('sensor.time') }}\" Note: You can of course omit the second label object with the unit and use the same for both value and unit: {\"page\":0,\"id\":4,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00.0\u00b0C\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} {\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"align\":0,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} In component configuration you will add the unit to the value using the template: objects: - obj: \"p0b4\" properties: \"text\": \"{{ states('sensor.my_room_temperature') }}\u00b0C\" All these being on page 0 means that they will appear on all the pages. Some basic controls Jsonl and Home Assistant configuration: Toggle a light (or any switchable entity with on/off states) {\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":28,\"align\":1} - obj: \"p1b2\" # switch, checkbox or btn with toggle true properties: \"val\": '{{ 1 if is_state(\"light.my_lamp\", \"on\") else 0 }}' \"text\": '{{ \"\\uE6E8\" if is_state(\"light.my_lamp\", \"on\") else \"\\uE335\" | e }}' event: \"down\": - service: homeassistant.toggle entity_id: \"light.my_lamp\" Dropdown (self-populating from an input_select) {\"page\":1,\"id\":3,\"obj\":\"dropdown\",\"x\":5,\"y\":40,\"w\":230,\"h\":30,\"options\":\"\"} - obj: \"p1b3\" # dropdown properties: \"options\": > {% if not (is_state('input_select.my_dropdown_selections','unavailable')) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%}{{item+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('input_select.my_dropdown_selections','unavailable')) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%} {{loop.index -1 if item == states('input_select.my_dropdown_selections') }} {%-endfor%}{% endif %} event: \"changed\": - service: input_select.select_option data: entity_id: input_select.my_dropdown_selections option: \"{{ text }}\" See the other examples for pairing different kinds of objects to different kinds of Home Assistant entities. RGB light color Have an RGB light in Home Assistant controlled by hasp-lvgl. In our example we use Lanbon L8's moodlight. relevant openHASP config: {\"page\":1,\"id\":4,\"obj\":\"cpicker\",\"x\":20,\"y\":70,\"w\":200,\"h\":200}` relevant openHASP-custom-component config: - obj: \"p1b4\" # color picker properties: \"color\": > {% if is_state('light.openhasp_lanbon_test_moodlight','on') %} {% set rgb = state_attr('light.openhasp_lanbon_test_moodlight','rgb_color') %} {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }} {% endif %} event: \"up\": - service: light.turn_on data: entity_id: light.openhasp_lanbon_test_moodlight rgb_color: \"[{{ r }},{{ g }},{{ b }}]\" The color property gets updated from the rgb_color attriburte of light.openhasp_lanbon_test_moodlight . The R, G and B decimal color values are converted to hexadecimal html color code using a template whenever the color of the light changes in Home Assistant. Whenever somebody changes the color of the cpicker object on the plate, the light in Home Assustant gets updated with rgb_color values received in the MQTT message. Generic thermostat/climate Arc can be dragged by the handle, precise set possible from the +/-buttons. Note that the min , max and val values of the arc are multiplied and divided by 10 when set and read, because LVGL only suppports integers for object values. By multiplying and dividing by 10, it becomes possible to set decimal values for climate temperature. The objects self-populate with the supported attributes of the climate in Home Assistant: - the arc min and max get the min and max temperatures - the dropdown gets the available heating modes, and changes accordingly during operation - the plus and minus buttons increase and decrease the temperature by the temperature step defined by the climate The circle in the middle changes color if it's heating, but also serves as a touch-catcher to minimize false arc-touch detections while manipulating with plus and minus buttons. Controls get disabled when entity is unavailable in HA. relevant openHASP config: (screen size 240x320) {\"page\":2,\"id\":2,\"obj\":\"arc\",\"x\":10,\"y\":70,\"w\":220,\"h\":220,\"min\":180,\"max\":250,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"value_font\":28,\"value_color\":\"#2C3E50\",\"adjustable\":\"true\"} {\"page\":2,\"id\":3,\"obj\":\"obj\",\"x\":40,\"y\":100,\"w\":160,\"h\":160,\"radius\":100,\"opacity\":100,\"border_opa\":160,\"border_width\":4,\"comment\":\"touch-catcher\"} {\"page\":2,\"id\":4,\"obj\":\"label\",\"x\":10,\"y\":40,\"w\":220,\"h\":30,\"text\":\"K\u00edv\u00e1nt h\u0151m\u00e9rs\u00e9klet:\",\"align\":1,\"padh\":50} {\"page\":2,\"id\":5,\"obj\":\"dropdown\",\"x\":75,\"y\":235,\"w\":90,\"h\":30,\"options\":\"\"} {\"page\":2,\"id\":6,\"obj\":\"btn\",\"x\":50,\"y\":160,\"w\":40,\"h\":40,\"toggle\":false,\"text\":\"\\uE374\",\"text_font\":28,\"align\":1} {\"page\":2,\"id\":7,\"obj\":\"btn\",\"x\":150,\"y\":160,\"w\":40,\"h\":40,\"toggle\":false,\"text\":\"\\uE415\",\"text_font\":28,\"align\":1} {\"page\":2,\"id\":8,\"obj\":\"label\",\"x\":60,\"y\":115,\"w\":120,\"h\":30,\"text\":\"Status\",\"align\":1,\"padh\":50} relevant openHASP-custom-component config: - obj: \"p2b2\" # arc properties: \"val\": \"{{ state_attr('climate.thermostat_1','temperature') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"value_str\": \"{{ state_attr('climate.thermostat_1','temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\" \"min\": \"{{ state_attr('climate.thermostat_1','min_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"max\": \"{{ state_attr('climate.thermostat_1','max_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\" \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\" event: \"changed\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ val | int / 10 }}\" \"up\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ val | int / 10 }}\" - obj: \"p2b5\" # dropdown with modes properties: \"options\": > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%}{{mode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%} {{loop.index -1 if mode == states('climate.thermostat_1') }} {%-endfor%}{% endif %} event: \"changed\": - service: climate.set_hvac_mode data: entity_id: climate.thermostat_1 hvac_mode: \"{{ text }}\" - obj: \"p2b6\" # plus properties: \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\" \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\" event: \"down\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ state_attr('climate.thermostat_1','temperature') - state_attr('climate.thermostat_1','target_temp_step') | float}}\" - obj: \"p2b7\" # minus properties: \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\" \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\" event: \"down\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ state_attr('climate.thermostat_1','temperature') + state_attr('climate.thermostat_1','target_temp_step') | float}}\" - obj: \"p2b8\" # status label properties: \"text\": \"{{ state_attr('climate.thermostat_1','hvac_action') }}\" - obj: \"p2b3\" # color circle touch-catcher properties: \"border_color\": \"{{ 'Blush' if is_state_attr('climate.thermostat_1', 'hvac_action', 'heating') else 'Silver' }}\" - obj: \"p2b4\" # top label properties: \"text\": \"Desired temperature: {{ state_attr('climate.thermostat_1','temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\u00b0C\" Cover with state feedback The icon on the up and down buttons change color when covers move and set opacity when reached to limit. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) {\"page\":1,\"id\":4,\"obj\":\"btn\",\"x\":5,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":28} {\"page\":1,\"id\":5,\"obj\":\"btn\",\"x\":83,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":28} {\"page\":1,\"id\":6,\"obj\":\"btn\",\"x\":161,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":28} relevant openHASP-custom-component config: - obj: \"p1b4\" properties: \"text_color\": \"{{ '#FFFF00' if is_state('cover.cover_1', 'opening') else '#FFFFFF' }}\" \"text_opa\": \"{{ '80' if is_state_attr('cover.cover_1','current_position', 100) else '255' }}\" event: \"down\": - service: cover.open_cover target: entity_id: \"cover.cover_1\" - obj: \"p1b5\" properties: \"text\": > {% if is_state('cover.cover_1', 'closing') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'opening') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.cover_1', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} event: \"down\": - service: cover.stop_cover target: entity_id: \"cover.cover_1\" - obj: \"p1b6\" properties: \"text_color\": \"{{ '#FFFF00' if is_state('cover.cover_1', 'closing') else '#FFFFFF' }}\" \"text_opa\": \"{{ '80' if is_state_attr('cover.cover_1','current_position', 0) else '255' }}\" event: \"down\": - service: cover.close_cover target: entity_id: \"cover.cover_1\" Cover with button matrix A simpler cover control with only basic feedback. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) {\"page\":4,\"id\":20,\"obj\":\"btnmatrix\",\"x\":0,\"y\":20,\"w\":240,\"h\":70,\"options\":[\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"],\"text_font\":28,\"bg_opa\":0,\"border_opa\":0} relevant openHASP-custom-component config: - obj: \"p4b20\" properties: \"options\": > {% if is_state('cover.cover_1', 'closing') %} [\"\\uE05D\",\"\\uE4DB\",\"#FFFF00 \\uE045\"] {%-elif is_state('cover.cover_1', 'opening') %} [\"#FFFF00 \\uE05D\",\"\\uE4DB\",\"\\uE045\"] {%-else %} [\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"] {% endif %} event: \"down\": - service: > {% if val == 0 %} cover.open_cover {%-elif val == 1 %} cover.stop_cover {%-elif val == 2 %} cover.close_cover {% endif %} target: entity_id: cover.cover_1 Cover like in Lovelace The icon behaves like in Lovelace. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) {\"page\":5,\"id\":2,\"obj\":\"label\",\"x\":8,\"y\":33,\"w\":35,\"h\":35,\"text\":\"\\uF11D\",\"align\":1,\"text_font\":28,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":3,\"obj\":\"label\",\"x\":48,\"y\":43,\"w\":80,\"h\":30,\"text\":\"Cover 1\",\"align\":0,\"text_font\":16,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":4,\"obj\":\"btn\",\"x\":125,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":28,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":5,\"obj\":\"btn\",\"x\":165,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":28,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":6,\"obj\":\"btn\",\"x\":205,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":28,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#164f6e\"} relevant openHASP-custom-component config: - obj: \"p5b2\" properties: \"text\": > {% if is_state('cover.my_cover', 'closing') %} {{ \"\\uE6C0\" | e }} {%-elif is_state('cover.my_cover', 'opening') %} {{ \"\\uE6C3\" | e }} {%-elif is_state('cover.my_cover', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.my_cover', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} - obj: \"p5b4\" event: \"down\": - service: cover.open_cover target: entity_id: \"cover.my_cover\" - obj: \"p5b5\" event: \"down\": - service: cover.stop_cover target: entity_id: \"cover.my_cover\" - obj: \"p5b6\" event: \"down\": - service: cover.close_cover target: entity_id: \"cover.my_cover\" Your browser does not support the video tag. Media Player The labels with artist and title are scrolling, the progressbar fills if the media player provides duration and playback position. The dropdown lists containing the available sources and sound modes of the player get populated automatically by the values existing on the player in Home Assistant, also the actually selected value is in sync with the values selected in Home Assistant. Player availability is shown by the opacity of the buttons. Player state (play/pause) is shown by the middle button. Power state shown by color, repeat, shuffle and muted state shown by appropriate icons on the buttons. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) {\"page\":6,\"id\":1,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":200,\"h\":84,\"click\":0} {\"page\":6,\"id\":2,\"obj\":\"label\",\"x\":7,\"y\":45,\"w\":196,\"h\":30,\"text\":\"-\",\"mode\":\"scroll\",\"align\":1} {\"page\":6,\"id\":3,\"obj\":\"label\",\"x\":7,\"y\":80,\"w\":196,\"h\":30,\"text\":\"-\",\"mode\":\"scroll\",\"align\":1} {\"page\":6,\"id\":4,\"obj\":\"bar\",\"x\":5,\"y\":108,\"w\":200,\"h\":11,\"min\":0,\"max\":100} {\"page\":6,\"id\":5,\"obj\":\"dropdown\",\"x\":5,\"y\":128,\"w\":120,\"h\":30,\"options\":\"Source1\\nSource2\\nSource3\",\"direction\":3,\"max_height\":300} {\"page\":6,\"id\":6,\"obj\":\"dropdown\",\"x\":130,\"y\":128,\"w\":75,\"h\":30,\"options\":\"Jazz\\nPop\\nRock\",\"direction\":2} {\"page\":6,\"id\":7,\"obj\":\"btn\",\"x\":5,\"y\":170,\"w\":50,\"h\":60,\"toggle\":false,\"text\":\"\\uE4AE\",\"text_font\":28} {\"page\":6,\"id\":8,\"obj\":\"btn\",\"x\":63,\"y\":170,\"w\":83,\"h\":60,\"toggle\":false,\"text\":\"\\uE40A\",\"text_font\":28} {\"page\":6,\"id\":9,\"obj\":\"btn\",\"x\":154,\"y\":170,\"w\":51,\"h\":60,\"toggle\":false,\"text\":\"\\uE4AD\",\"text_font\":28} {\"page\":6,\"id\":10,\"obj\":\"slider\",\"x\":212,\"y\":35,\"w\":22,\"h\":245,\"min\":0,\"max\":100} {\"page\":6,\"id\":12,\"obj\":\"btn\",\"x\":57,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE457\",\"text_font\":28} {\"page\":6,\"id\":13,\"obj\":\"btn\",\"x\":108,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE49E\",\"text_font\":28} {\"page\":6,\"id\":14,\"obj\":\"btn\",\"x\":5,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE425\",\"text_font\":28} {\"page\":6,\"id\":15,\"obj\":\"btn\",\"x\":160,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE57E\",\"text_font\":28} relevant openHASP-custom-component config: - obj: \"p6b2\" # artist properties: \"text\": \"{{ state_attr('media_player.sound_my_room','media_artist') if state_attr('media_player.sound_my_room','media_artist') else '-' }}\" - obj: \"p6b3\" # title properties: \"text\": \"{{ state_attr('media_player.sound_my_room','media_title') if state_attr('media_player.sound_my_room','media_title') else '-' }}\" - obj: \"p6b5\" # sources list properties: \"options\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{{\"(no source)\\n\"|e}}{%for source in state_attr('media_player.sound_my_room','source_list')%}{{source+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{%for source in state_attr('media_player.sound_my_room','source_list')%} {{loop.index if source == state_attr('media_player.sound_my_room','source') }} {%-endfor%}{% endif %} \"click\": \"{{ 'false' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else 'true' }}\" event: \"changed\": - service: media_player.select_source data: entity_id: media_player.sound_my_room source: \"{{ text }}\" - obj: \"p6b6\" # sound modes list properties: \"options\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{%for soundmode in state_attr('media_player.sound_my_room','sound_mode_list')%}{{soundmode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{%for source in state_attr('media_player.sound_my_room','sound_mode_list')%} {{loop.index -1 if source == state_attr('media_player.sound_my_room','sound_mode') }} {%-endfor%}{% endif %} \"click\": \"{{ 'false' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else 'true' }}\" event: \"changed\": - service: media_player.select_sound_mode data: entity_id: media_player.sound_my_room sound_mode: \"{{ text }}\" - obj: \"p6b4\" # progressbar properties: \"max\": \"{{ state_attr('media_player.sound_my_room','media_duration') | int }}\" \"val\": \"{{ state_attr('media_player.sound_my_room','media_position') | int }}\" - obj: \"p6b7\" # prev properties: \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.media_previous_track target: entity_id: media_player.sound_my_room - obj: \"p6b9\" # next properties: \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.media_next_track target: entity_id: media_player.sound_my_room - obj: \"p6b8\" # play/pause properties: \"text\": > {% if is_state('media_player.sound_my_room', 'playing') %} {{ \"\\uE3E4\" | e }} {%-else %} {{ \"\\uE40A\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.media_play_pause target: entity_id: media_player.sound_my_room - obj: \"p6b10\" # volume slider properties: \"val\": \"{{ state_attr('media_player.sound_my_room','volume_level') * 100 | int }}\" \"click\": \"{{ 'false' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else 'true' }}\" event: \"changed\": - service: media_player.volume_set data: entity_id: media_player.sound_my_room volume_level: \"{{ val | int / 100 }}\" \"up\": - service: media_player.volume_set data: entity_id: media_player.sound_my_room volume_level: \"{{ val | int / 100 }}\" - obj: \"p6b12\" # repeat properties: \"text\": > {% if is_state_attr('media_player.sound_my_room', 'repeat', 'one') %} {{ \"\\uE458\" | e }} {% elif is_state_attr('media_player.sound_my_room', 'repeat', 'all') %} {{ \"\\uE456\" | e }} {%-else %} {{ \"\\uE457\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.repeat_set data: entity_id: media_player.sound_my_room repeat: > {% if is_state_attr('media_player.sound_my_room', 'repeat', 'one') %} all {% elif is_state_attr('media_player.sound_my_room', 'repeat', 'all') %} off {% elif is_state_attr('media_player.sound_my_room', 'repeat', 'off') %} one {%-endif %} - obj: \"p6b13\" # shuffle properties: \"text\": > {% if state_attr('media_player.sound_my_room', 'shuffle') %} {{ \"\\uE49D\" | e }} {%-else %} {{ \"\\uE49E\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.shuffle_set data: entity_id: media_player.sound_my_room shuffle: > {% if state_attr('media_player.sound_my_room', 'shuffle') %} false {% else %} true {%-endif %} - obj: \"p6b15\" # mute properties: \"text\": > {% if state_attr('media_player.sound_my_room', 'is_volume_muted') %} {{ \"\\uE75F\" | e }} {%-else %} {{ \"\\uE57E\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.volume_mute data: entity_id: media_player.sound_my_room is_volume_muted: > {% if state_attr('media_player.sound_my_room', 'is_volume_muted') %} false {% else %} true {%-endif %} - obj: \"p6b14\" # power properties: \"text_color\": \"{{ '#B00000' if states('media_player.sound_my_room') == 'off' else '#FFFFFF' }}\" \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.toggle data: entity_id: media_player.sound_my_room Note that the val value of the slider is multiplied and divided by 100 when read and set, because LVGL only suppports integers for object values. By multiplying and dividing by 100, it becomes possible to set volume between 0 and 1 as required by Home Assistant. Color coded icons Color code a WiFi icon according to RSSI reported by the plate openHASP config: (screen size 240x320) {\"obj\":\"btn\",\"id\":1,\"x\":120,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"\\uF76B\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0} relevant openHASP-custom-component config: - obj: \"p0b1\" properties: \"text_color\": \"{% if -30 <= state_attr('openhasp.openhasp_plate','rssi') |int %}green{% elif -31 > state_attr('openhasp.openhasp_plate','rssi') |int >= -50 %}orange{% elif -51 > state_attr('openhasp.openhasp_plate','rssi') |int >= -80 %}tomato{% else %}red{% endif %}\"``` Color code a temperature icon according to sensor values openHASP config: (screen size 240x320) {\"obj\":\"btn\",\"id\":3,\"x\":165,\"y\":1,\"w\":30,\"h\":40,\"text_font\":\"2\",\"text\":\"\\uF1EB\",\"text_color\":\"gray\",\"bg_opa\":0,\"border_width\":0} relevant openHASP-custom-component config: - obj: \"p0b3\" properties: \"text_color\": \"{% if states('sensor.room_temperature') |int <= 21 %}#4682B4{% elif 21 < states('sensor.room_temperature') |int <= 26 %}green{% else %}red{% endif %}\"","title":"Sampl conf"},{"location":"custom-component/sampl_conf/#display-clock-and-temperature","text":"The easiest example is to display the state of a clock and a temperature sensor from Home Assistant, using label objects in openHASP. Create a label object to display the temperature value, a separate label object to display the unit and a third label object for the clock: {\"page\":0,\"id\":4,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":45,\"text\":\"00.0\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} {\"page\":0,\"id\":5,\"obj\":\"label\",\"x\":220,\"y\":5,\"h\":30,\"w\":45,\"text\":\"\u00b0C\",\"align\":0,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} {\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"align\":0,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} In component configuration all you need for the objects is: objects: - obj: \"p0b4\" properties: \"text\": \"{{ states('sensor.my_room_temperature') }}\" - obj: \"p0b6\" properties: \"text\": \"{{ states('sensor.time') }}\"","title":"Display clock and temperature"},{"location":"custom-component/sampl_conf/#note","text":"You can of course omit the second label object with the unit and use the same for both value and unit: {\"page\":0,\"id\":4,\"obj\":\"label\",\"x\":175,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00.0\u00b0C\",\"align\":2,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} {\"page\":0,\"id\":6,\"obj\":\"label\",\"x\":3,\"y\":5,\"h\":30,\"w\":62,\"text\":\"00:00\",\"align\":0,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\"} In component configuration you will add the unit to the value using the template: objects: - obj: \"p0b4\" properties: \"text\": \"{{ states('sensor.my_room_temperature') }}\u00b0C\" All these being on page 0 means that they will appear on all the pages.","title":"Note:"},{"location":"custom-component/sampl_conf/#some-basic-controls","text":"Jsonl and Home Assistant configuration:","title":"Some basic controls"},{"location":"custom-component/sampl_conf/#toggle-a-light-or-any-switchable-entity-with-onoff-states","text":"{\"page\":1,\"id\":2,\"obj\":\"btn\",\"x\":10,\"y\":40,\"w\":105,\"h\":90,\"toggle\":true,\"text\":\"\\uE335\",\"text_font\":28,\"align\":1} - obj: \"p1b2\" # switch, checkbox or btn with toggle true properties: \"val\": '{{ 1 if is_state(\"light.my_lamp\", \"on\") else 0 }}' \"text\": '{{ \"\\uE6E8\" if is_state(\"light.my_lamp\", \"on\") else \"\\uE335\" | e }}' event: \"down\": - service: homeassistant.toggle entity_id: \"light.my_lamp\"","title":"Toggle a light (or any switchable entity with on/off states)"},{"location":"custom-component/sampl_conf/#dropdown-self-populating-from-an-input_select","text":"{\"page\":1,\"id\":3,\"obj\":\"dropdown\",\"x\":5,\"y\":40,\"w\":230,\"h\":30,\"options\":\"\"} - obj: \"p1b3\" # dropdown properties: \"options\": > {% if not (is_state('input_select.my_dropdown_selections','unavailable')) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%}{{item+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('input_select.my_dropdown_selections','unavailable')) %}{%for item in state_attr('input_select.my_dropdown_selections','options')%} {{loop.index -1 if item == states('input_select.my_dropdown_selections') }} {%-endfor%}{% endif %} event: \"changed\": - service: input_select.select_option data: entity_id: input_select.my_dropdown_selections option: \"{{ text }}\" See the other examples for pairing different kinds of objects to different kinds of Home Assistant entities.","title":"Dropdown (self-populating from an input_select)"},{"location":"custom-component/sampl_conf/#rgb-light-color","text":"Have an RGB light in Home Assistant controlled by hasp-lvgl. In our example we use Lanbon L8's moodlight. relevant openHASP config: {\"page\":1,\"id\":4,\"obj\":\"cpicker\",\"x\":20,\"y\":70,\"w\":200,\"h\":200}` relevant openHASP-custom-component config: - obj: \"p1b4\" # color picker properties: \"color\": > {% if is_state('light.openhasp_lanbon_test_moodlight','on') %} {% set rgb = state_attr('light.openhasp_lanbon_test_moodlight','rgb_color') %} {{ \"#%02x%02x%02x\" | format(rgb[0],rgb[1],rgb[2]) }} {% endif %} event: \"up\": - service: light.turn_on data: entity_id: light.openhasp_lanbon_test_moodlight rgb_color: \"[{{ r }},{{ g }},{{ b }}]\" The color property gets updated from the rgb_color attriburte of light.openhasp_lanbon_test_moodlight . The R, G and B decimal color values are converted to hexadecimal html color code using a template whenever the color of the light changes in Home Assistant. Whenever somebody changes the color of the cpicker object on the plate, the light in Home Assustant gets updated with rgb_color values received in the MQTT message.","title":"RGB light color"},{"location":"custom-component/sampl_conf/#generic-thermostatclimate","text":"Arc can be dragged by the handle, precise set possible from the +/-buttons. Note that the min , max and val values of the arc are multiplied and divided by 10 when set and read, because LVGL only suppports integers for object values. By multiplying and dividing by 10, it becomes possible to set decimal values for climate temperature. The objects self-populate with the supported attributes of the climate in Home Assistant: - the arc min and max get the min and max temperatures - the dropdown gets the available heating modes, and changes accordingly during operation - the plus and minus buttons increase and decrease the temperature by the temperature step defined by the climate The circle in the middle changes color if it's heating, but also serves as a touch-catcher to minimize false arc-touch detections while manipulating with plus and minus buttons. Controls get disabled when entity is unavailable in HA. relevant openHASP config: (screen size 240x320) {\"page\":2,\"id\":2,\"obj\":\"arc\",\"x\":10,\"y\":70,\"w\":220,\"h\":220,\"min\":180,\"max\":250,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"value_font\":28,\"value_color\":\"#2C3E50\",\"adjustable\":\"true\"} {\"page\":2,\"id\":3,\"obj\":\"obj\",\"x\":40,\"y\":100,\"w\":160,\"h\":160,\"radius\":100,\"opacity\":100,\"border_opa\":160,\"border_width\":4,\"comment\":\"touch-catcher\"} {\"page\":2,\"id\":4,\"obj\":\"label\",\"x\":10,\"y\":40,\"w\":220,\"h\":30,\"text\":\"K\u00edv\u00e1nt h\u0151m\u00e9rs\u00e9klet:\",\"align\":1,\"padh\":50} {\"page\":2,\"id\":5,\"obj\":\"dropdown\",\"x\":75,\"y\":235,\"w\":90,\"h\":30,\"options\":\"\"} {\"page\":2,\"id\":6,\"obj\":\"btn\",\"x\":50,\"y\":160,\"w\":40,\"h\":40,\"toggle\":false,\"text\":\"\\uE374\",\"text_font\":28,\"align\":1} {\"page\":2,\"id\":7,\"obj\":\"btn\",\"x\":150,\"y\":160,\"w\":40,\"h\":40,\"toggle\":false,\"text\":\"\\uE415\",\"text_font\":28,\"align\":1} {\"page\":2,\"id\":8,\"obj\":\"label\",\"x\":60,\"y\":115,\"w\":120,\"h\":30,\"text\":\"Status\",\"align\":1,\"padh\":50} relevant openHASP-custom-component config: - obj: \"p2b2\" # arc properties: \"val\": \"{{ state_attr('climate.thermostat_1','temperature') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"value_str\": \"{{ state_attr('climate.thermostat_1','temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\" \"min\": \"{{ state_attr('climate.thermostat_1','min_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"max\": \"{{ state_attr('climate.thermostat_1','max_temp') * 10 | int if not (is_state('climate.thermostat_1','unavailable')) }}\" \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\" \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\" event: \"changed\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ val | int / 10 }}\" \"up\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ val | int / 10 }}\" - obj: \"p2b5\" # dropdown with modes properties: \"options\": > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%}{{mode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('climate.thermostat_1','unavailable')) %}{%for mode in state_attr('climate.thermostat_1','hvac_modes')%} {{loop.index -1 if mode == states('climate.thermostat_1') }} {%-endfor%}{% endif %} event: \"changed\": - service: climate.set_hvac_mode data: entity_id: climate.thermostat_1 hvac_mode: \"{{ text }}\" - obj: \"p2b6\" # plus properties: \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\" \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\" event: \"down\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ state_attr('climate.thermostat_1','temperature') - state_attr('climate.thermostat_1','target_temp_step') | float}}\" - obj: \"p2b7\" # minus properties: \"opacity\": \"{{ 60 if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 255 }}\" \"click\": \"{{ 'false' if (is_state('climate.thermostat_1','unavailable') or is_state('climate.thermostat_1','unknown')) else 'true' }}\" event: \"down\": - service: climate.set_temperature data: entity_id: climate.thermostat_1 temperature: \"{{ state_attr('climate.thermostat_1','temperature') + state_attr('climate.thermostat_1','target_temp_step') | float}}\" - obj: \"p2b8\" # status label properties: \"text\": \"{{ state_attr('climate.thermostat_1','hvac_action') }}\" - obj: \"p2b3\" # color circle touch-catcher properties: \"border_color\": \"{{ 'Blush' if is_state_attr('climate.thermostat_1', 'hvac_action', 'heating') else 'Silver' }}\" - obj: \"p2b4\" # top label properties: \"text\": \"Desired temperature: {{ state_attr('climate.thermostat_1','temperature') if not (is_state('climate.thermostat_1','unavailable')) }}\u00b0C\"","title":"Generic thermostat/climate"},{"location":"custom-component/sampl_conf/#cover-with-state-feedback","text":"The icon on the up and down buttons change color when covers move and set opacity when reached to limit. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) {\"page\":1,\"id\":4,\"obj\":\"btn\",\"x\":5,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":28} {\"page\":1,\"id\":5,\"obj\":\"btn\",\"x\":83,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":28} {\"page\":1,\"id\":6,\"obj\":\"btn\",\"x\":161,\"y\":140,\"w\":73,\"h\":60,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":28} relevant openHASP-custom-component config: - obj: \"p1b4\" properties: \"text_color\": \"{{ '#FFFF00' if is_state('cover.cover_1', 'opening') else '#FFFFFF' }}\" \"text_opa\": \"{{ '80' if is_state_attr('cover.cover_1','current_position', 100) else '255' }}\" event: \"down\": - service: cover.open_cover target: entity_id: \"cover.cover_1\" - obj: \"p1b5\" properties: \"text\": > {% if is_state('cover.cover_1', 'closing') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'opening') %} {{ \"\\uE4DB\" | e }} {%-elif is_state('cover.cover_1', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.cover_1', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} event: \"down\": - service: cover.stop_cover target: entity_id: \"cover.cover_1\" - obj: \"p1b6\" properties: \"text_color\": \"{{ '#FFFF00' if is_state('cover.cover_1', 'closing') else '#FFFFFF' }}\" \"text_opa\": \"{{ '80' if is_state_attr('cover.cover_1','current_position', 0) else '255' }}\" event: \"down\": - service: cover.close_cover target: entity_id: \"cover.cover_1\"","title":"Cover with state feedback"},{"location":"custom-component/sampl_conf/#cover-with-button-matrix","text":"A simpler cover control with only basic feedback. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) {\"page\":4,\"id\":20,\"obj\":\"btnmatrix\",\"x\":0,\"y\":20,\"w\":240,\"h\":70,\"options\":[\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"],\"text_font\":28,\"bg_opa\":0,\"border_opa\":0} relevant openHASP-custom-component config: - obj: \"p4b20\" properties: \"options\": > {% if is_state('cover.cover_1', 'closing') %} [\"\\uE05D\",\"\\uE4DB\",\"#FFFF00 \\uE045\"] {%-elif is_state('cover.cover_1', 'opening') %} [\"#FFFF00 \\uE05D\",\"\\uE4DB\",\"\\uE045\"] {%-else %} [\"\\uE05D\",\"\\uE4DB\",\"\\uE045\"] {% endif %} event: \"down\": - service: > {% if val == 0 %} cover.open_cover {%-elif val == 1 %} cover.stop_cover {%-elif val == 2 %} cover.close_cover {% endif %} target: entity_id: cover.cover_1","title":"Cover with button matrix"},{"location":"custom-component/sampl_conf/#cover-like-in-lovelace","text":"The icon behaves like in Lovelace. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320, UI Theme: Hasp Light) {\"page\":5,\"id\":2,\"obj\":\"label\",\"x\":8,\"y\":33,\"w\":35,\"h\":35,\"text\":\"\\uF11D\",\"align\":1,\"text_font\":28,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":3,\"obj\":\"label\",\"x\":48,\"y\":43,\"w\":80,\"h\":30,\"text\":\"Cover 1\",\"align\":0,\"text_font\":16,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":4,\"obj\":\"btn\",\"x\":125,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE05D\",\"text_font\":28,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":5,\"obj\":\"btn\",\"x\":165,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE4DB\",\"text_font\":28,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#164f6e\"} {\"page\":5,\"id\":6,\"obj\":\"btn\",\"x\":205,\"y\":37,\"w\":30,\"h\":30,\"toggle\":false,\"text\":\"\\uE045\",\"text_font\":28,\"bg_opa\":0,\"border_opa\":0,\"text_color\":\"#164f6e\"} relevant openHASP-custom-component config: - obj: \"p5b2\" properties: \"text\": > {% if is_state('cover.my_cover', 'closing') %} {{ \"\\uE6C0\" | e }} {%-elif is_state('cover.my_cover', 'opening') %} {{ \"\\uE6C3\" | e }} {%-elif is_state('cover.my_cover', 'closed') %} {{ \"\\uF11C\" | e }} {%-elif is_state('cover.my_cover', 'open') %} {{ \"\\uF11E\" | e }} {% endif %} - obj: \"p5b4\" event: \"down\": - service: cover.open_cover target: entity_id: \"cover.my_cover\" - obj: \"p5b5\" event: \"down\": - service: cover.stop_cover target: entity_id: \"cover.my_cover\" - obj: \"p5b6\" event: \"down\": - service: cover.close_cover target: entity_id: \"cover.my_cover\" Your browser does not support the video tag.","title":"Cover like in Lovelace"},{"location":"custom-component/sampl_conf/#media-player","text":"The labels with artist and title are scrolling, the progressbar fills if the media player provides duration and playback position. The dropdown lists containing the available sources and sound modes of the player get populated automatically by the values existing on the player in Home Assistant, also the actually selected value is in sync with the values selected in Home Assistant. Player availability is shown by the opacity of the buttons. Player state (play/pause) is shown by the middle button. Power state shown by color, repeat, shuffle and muted state shown by appropriate icons on the buttons. UI theme set to Hasp Light in plate's web interface. relevant openHASP config: (screen size 240x320) {\"page\":6,\"id\":1,\"obj\":\"obj\",\"x\":5,\"y\":35,\"w\":200,\"h\":84,\"click\":0} {\"page\":6,\"id\":2,\"obj\":\"label\",\"x\":7,\"y\":45,\"w\":196,\"h\":30,\"text\":\"-\",\"mode\":\"scroll\",\"align\":1} {\"page\":6,\"id\":3,\"obj\":\"label\",\"x\":7,\"y\":80,\"w\":196,\"h\":30,\"text\":\"-\",\"mode\":\"scroll\",\"align\":1} {\"page\":6,\"id\":4,\"obj\":\"bar\",\"x\":5,\"y\":108,\"w\":200,\"h\":11,\"min\":0,\"max\":100} {\"page\":6,\"id\":5,\"obj\":\"dropdown\",\"x\":5,\"y\":128,\"w\":120,\"h\":30,\"options\":\"Source1\\nSource2\\nSource3\",\"direction\":3,\"max_height\":300} {\"page\":6,\"id\":6,\"obj\":\"dropdown\",\"x\":130,\"y\":128,\"w\":75,\"h\":30,\"options\":\"Jazz\\nPop\\nRock\",\"direction\":2} {\"page\":6,\"id\":7,\"obj\":\"btn\",\"x\":5,\"y\":170,\"w\":50,\"h\":60,\"toggle\":false,\"text\":\"\\uE4AE\",\"text_font\":28} {\"page\":6,\"id\":8,\"obj\":\"btn\",\"x\":63,\"y\":170,\"w\":83,\"h\":60,\"toggle\":false,\"text\":\"\\uE40A\",\"text_font\":28} {\"page\":6,\"id\":9,\"obj\":\"btn\",\"x\":154,\"y\":170,\"w\":51,\"h\":60,\"toggle\":false,\"text\":\"\\uE4AD\",\"text_font\":28} {\"page\":6,\"id\":10,\"obj\":\"slider\",\"x\":212,\"y\":35,\"w\":22,\"h\":245,\"min\":0,\"max\":100} {\"page\":6,\"id\":12,\"obj\":\"btn\",\"x\":57,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE457\",\"text_font\":28} {\"page\":6,\"id\":13,\"obj\":\"btn\",\"x\":108,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE49E\",\"text_font\":28} {\"page\":6,\"id\":14,\"obj\":\"btn\",\"x\":5,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE425\",\"text_font\":28} {\"page\":6,\"id\":15,\"obj\":\"btn\",\"x\":160,\"y\":242,\"w\":45,\"h\":37,\"toggle\":false,\"text\":\"\\uE57E\",\"text_font\":28} relevant openHASP-custom-component config: - obj: \"p6b2\" # artist properties: \"text\": \"{{ state_attr('media_player.sound_my_room','media_artist') if state_attr('media_player.sound_my_room','media_artist') else '-' }}\" - obj: \"p6b3\" # title properties: \"text\": \"{{ state_attr('media_player.sound_my_room','media_title') if state_attr('media_player.sound_my_room','media_title') else '-' }}\" - obj: \"p6b5\" # sources list properties: \"options\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{{\"(no source)\\n\"|e}}{%for source in state_attr('media_player.sound_my_room','source_list')%}{{source+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{%for source in state_attr('media_player.sound_my_room','source_list')%} {{loop.index if source == state_attr('media_player.sound_my_room','source') }} {%-endfor%}{% endif %} \"click\": \"{{ 'false' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else 'true' }}\" event: \"changed\": - service: media_player.select_source data: entity_id: media_player.sound_my_room source: \"{{ text }}\" - obj: \"p6b6\" # sound modes list properties: \"options\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{%for soundmode in state_attr('media_player.sound_my_room','sound_mode_list')%}{{soundmode+\"\\n\"|e}}{%-if not loop.last%}{%-endif%}{%-endfor%}{% endif %} \"val\": > {% if not (is_state('media_player.sound_my_room','unavailable')) %}{%for source in state_attr('media_player.sound_my_room','sound_mode_list')%} {{loop.index -1 if source == state_attr('media_player.sound_my_room','sound_mode') }} {%-endfor%}{% endif %} \"click\": \"{{ 'false' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else 'true' }}\" event: \"changed\": - service: media_player.select_sound_mode data: entity_id: media_player.sound_my_room sound_mode: \"{{ text }}\" - obj: \"p6b4\" # progressbar properties: \"max\": \"{{ state_attr('media_player.sound_my_room','media_duration') | int }}\" \"val\": \"{{ state_attr('media_player.sound_my_room','media_position') | int }}\" - obj: \"p6b7\" # prev properties: \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.media_previous_track target: entity_id: media_player.sound_my_room - obj: \"p6b9\" # next properties: \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.media_next_track target: entity_id: media_player.sound_my_room - obj: \"p6b8\" # play/pause properties: \"text\": > {% if is_state('media_player.sound_my_room', 'playing') %} {{ \"\\uE3E4\" | e }} {%-else %} {{ \"\\uE40A\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.media_play_pause target: entity_id: media_player.sound_my_room - obj: \"p6b10\" # volume slider properties: \"val\": \"{{ state_attr('media_player.sound_my_room','volume_level') * 100 | int }}\" \"click\": \"{{ 'false' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else 'true' }}\" event: \"changed\": - service: media_player.volume_set data: entity_id: media_player.sound_my_room volume_level: \"{{ val | int / 100 }}\" \"up\": - service: media_player.volume_set data: entity_id: media_player.sound_my_room volume_level: \"{{ val | int / 100 }}\" - obj: \"p6b12\" # repeat properties: \"text\": > {% if is_state_attr('media_player.sound_my_room', 'repeat', 'one') %} {{ \"\\uE458\" | e }} {% elif is_state_attr('media_player.sound_my_room', 'repeat', 'all') %} {{ \"\\uE456\" | e }} {%-else %} {{ \"\\uE457\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.repeat_set data: entity_id: media_player.sound_my_room repeat: > {% if is_state_attr('media_player.sound_my_room', 'repeat', 'one') %} all {% elif is_state_attr('media_player.sound_my_room', 'repeat', 'all') %} off {% elif is_state_attr('media_player.sound_my_room', 'repeat', 'off') %} one {%-endif %} - obj: \"p6b13\" # shuffle properties: \"text\": > {% if state_attr('media_player.sound_my_room', 'shuffle') %} {{ \"\\uE49D\" | e }} {%-else %} {{ \"\\uE49E\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.shuffle_set data: entity_id: media_player.sound_my_room shuffle: > {% if state_attr('media_player.sound_my_room', 'shuffle') %} false {% else %} true {%-endif %} - obj: \"p6b15\" # mute properties: \"text\": > {% if state_attr('media_player.sound_my_room', 'is_volume_muted') %} {{ \"\\uE75F\" | e }} {%-else %} {{ \"\\uE57E\" | e }} {%-endif %} \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.volume_mute data: entity_id: media_player.sound_my_room is_volume_muted: > {% if state_attr('media_player.sound_my_room', 'is_volume_muted') %} false {% else %} true {%-endif %} - obj: \"p6b14\" # power properties: \"text_color\": \"{{ '#B00000' if states('media_player.sound_my_room') == 'off' else '#FFFFFF' }}\" \"text_opa\": \"{{ '80' if (is_state('media_player.sound_my_room','unavailable') or is_state('media_player.sound_my_room','unknown')) else '255' }}\" event: \"down\": - service: media_player.toggle data: entity_id: media_player.sound_my_room Note that the val value of the slider is multiplied and divided by 100 when read and set, because LVGL only suppports integers for object values. By multiplying and dividing by 100, it becomes possible to set volume between 0 and 1 as required by Home Assistant.","title":"Media Player"},{"location":"custom-component/sampl_conf/#color-coded-icons","text":"","title":"Color coded icons"},{"location":"devices/esp32-touchdown/","text":"ESP32-Touchdown Features: ESP32-WROOM-32D ILI9488 3.5\" (480*320) TFT screen in 4-wire SPI mode FT62x6 Capacitive Touch Controller APK2112 3.3V regulator MCP73831 battery management IC CP2102 USB-to-UART IC USB-C connector Piezo Speaker microSD card holder Battery voltage divider connected to GPIO35 Stemma / JST-PH I2C connector Compact size: 100x57x15mm This board was originaly created for the FreeTouchDeck project and the hardware is also open source. Due to the extensive documentation it was easy to port openHASP to the ESP32-Touchdown. Pros Cons 480x320 display 4 MB flash Capactitive touch No PSram Battery connector Battery sensor The speaker and SD card are not supported by openHASP 0.6.0. Available on Video Backlight Control To enable backlight control, make sure the solder jumper pad is in position 2-1: 3D Printed Cases You can find several different 3D printable cases in the ESP32-Touchdown repository : Flashing The ESP32-Touchdown can easily be flashed over USB like any ESP32 development board. GPIO Settings These pins can be used freely as GPIOs: PCB Blueprint The ESP32-Touchdown is fully Open Source Hardware : Schematics Bill of materials PCB layout Datasheets HASP build_flags Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.vspi} ; Use VSPI hardware SPI bus ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED=1 -D ILI9488_DRIVER=1 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_CS=15 ;// Chip select control pin -D TFT_DC=2 ;// Data Command control pin -D TFT_RST=4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER=6336 ; XPT2606 Resistive touch panel driver -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=27 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V -D TOUCH_FREQUENCY=400000 -D SPI_FREQUENCY=27000000 -D SPI_READ_FREQUENCY=16000000 ;endregion","title":"Esp32 touchdown"},{"location":"devices/esp32-touchdown/#video","text":"","title":"Video"},{"location":"devices/esp32-touchdown/#backlight-control","text":"To enable backlight control, make sure the solder jumper pad is in position 2-1:","title":"Backlight Control"},{"location":"devices/esp32-touchdown/#3d-printed-cases","text":"You can find several different 3D printable cases in the ESP32-Touchdown repository :","title":"3D Printed Cases"},{"location":"devices/esp32-touchdown/#flashing","text":"The ESP32-Touchdown can easily be flashed over USB like any ESP32 development board.","title":"Flashing"},{"location":"devices/esp32-touchdown/#gpio-settings","text":"These pins can be used freely as GPIOs:","title":"GPIO Settings"},{"location":"devices/esp32-touchdown/#pcb-blueprint","text":"The ESP32-Touchdown is fully Open Source Hardware : Schematics Bill of materials PCB layout Datasheets","title":"PCB Blueprint"},{"location":"devices/esp32-touchdown/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.vspi} ; Use VSPI hardware SPI bus ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED=1 -D ILI9488_DRIVER=1 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_CS=15 ;// Chip select control pin -D TFT_DC=2 ;// Data Command control pin -D TFT_RST=4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER=6336 ; XPT2606 Resistive touch panel driver -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=27 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V -D TOUCH_FREQUENCY=400000 -D SPI_FREQUENCY=27000000 -D SPI_READ_FREQUENCY=16000000 ;endregion","title":"HASP build_flags"},{"location":"devices/freetouchdeck/","text":"FreeTouchDeck Features: ESP32 DevKitC (38pin) ili9488 TFT SPI 4-WIRE xpt2046 resistive touch controller This board is created for the FreeTouchDeck project and the PCB-combiner board is open source. Due to the extensive documentation it was easy to port openHASP to the FreeTouchDeck. Pros Cons 480x320 display 4 MB flash Price No PSram Resistive touch Video 3D Printed Cases You can find a 3D printable case on Thingiverse and Github . Flashing The FreeTouchDeck can easily be flashed over USB like any ESP32 development board. GPIO Settings These pins can be used freely as GPIOs: PCB Blueprint The PCB Combiner is fully Open Source Hardware : Schematics PCB layout HASP build_flags Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED=1 -D ILI9488_DRIVER=1 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_MISO=19 ;// (leave TFT SDO disconnected if other SPI devices share MISO) -D TFT_MOSI=23 -D TFT_SCLK=18 -D TFT_CS=15 ;// Chip select control pin -D TFT_DC=2 ;// Data Command control pin -D TFT_RST=4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL=32 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_CS=21 -D TOUCH_DRIVER=2046 ; XPT2606 Resistive touch panel driver -D SPI_FREQUENCY=27000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 ;endregion","title":"Freetouchdeck"},{"location":"devices/freetouchdeck/#video","text":"","title":"Video"},{"location":"devices/freetouchdeck/#3d-printed-cases","text":"You can find a 3D printable case on Thingiverse and Github .","title":"3D Printed Cases"},{"location":"devices/freetouchdeck/#flashing","text":"The FreeTouchDeck can easily be flashed over USB like any ESP32 development board.","title":"Flashing"},{"location":"devices/freetouchdeck/#gpio-settings","text":"These pins can be used freely as GPIOs:","title":"GPIO Settings"},{"location":"devices/freetouchdeck/#pcb-blueprint","text":"The PCB Combiner is fully Open Source Hardware : Schematics PCB layout","title":"PCB Blueprint"},{"location":"devices/freetouchdeck/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED=1 -D ILI9488_DRIVER=1 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_MISO=19 ;// (leave TFT SDO disconnected if other SPI devices share MISO) -D TFT_MOSI=23 -D TFT_SCLK=18 -D TFT_CS=15 ;// Chip select control pin -D TFT_DC=2 ;// Data Command control pin -D TFT_RST=4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL=32 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_CS=21 -D TOUCH_DRIVER=2046 ; XPT2606 Resistive touch panel driver -D SPI_FREQUENCY=27000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 ;endregion","title":"HASP build_flags"},{"location":"devices/lanbon-l8/","text":"Lanbon L8 Models L8-HS: 3 Relays - load up to 200W/gang L8-HD: 1 Dimmer - load up to 200W/gang L8-HT: Thermostat switch - not tested! L8-HB: Boiler switch - not tested! Form factor EU model: 86mm x 86mm US model: 120mm x 74mm Both models have the same recessed housing sliding in the wall, sized 50x50mm, with rounded corners creating a diameter of about 59mm. This makes them suitable for both EU and US wall fixtures. The EU model fits in a properly deployed, standard 60mm round wall box and can be fixed with two side screws (use the screws which belong to the box instead of the ones shipped with the device), the US model fits in the standard rectangular box and can be fixed through the oval holes located 3 1/4\" apart. The depth of the wall box has to be at least 35-40mm because some room is needed for the wires coming out straight of the device. Both models are rated at AC 100-250V ~50-60Hz, the form factor can be a design choice regardless of the continental area. Bezel Color Black White Features: Input voltage 110-250V ~ 50-60Hz AC ESP32-WROVER-B Capacitive touch screen Analog temperature sensor Energy counter Pros Cons 8 MB flash Mood LEDS not uniform 8 MB PSram Capactitive touch Energy monitor Contents Flashing Disclaimer Never connect high-voltage when the panel is not properly secured in place. You can follow this flashing guide on blakadder.com or this discussion post with instructions and photos to flash the firmware without having to open the device. Steps: Disengage the high-voltage power Detach the panel from the PSU power supply Connect RX, TX, IO0, GND and power pins to the female pinheader: Either supply 3.3V or 5V on the corresponding power pin, depending on the voltage supplied by the UART ttl (not both at the same time). Because there is no RESET pin, you need to powercycle the board to activate flash mode Once the serial connections are made, flash the Lanbon-L8 ESP32 firmware like any other device. GPIO Settings Pin L8-HS Group Default 12 Relay K3 1 Low 14 Relay 2 Low 26 Mood Red 4 Low 27 Relay 3 Low 32 Mood Green 5 Low 33 Mood Blue 6 Low To configure the GPIOs at once for L8-HS send to topic hasp/<nodename>/config a message with payload: {\"gpio\":{\"config\":[2360346,2491680,2623009,2097420,2097678,2097947,0,0]}} Pin L8-HD Group Default 12 Dimmer TX (K3) 1 Low 26 Mood Red 4 Low 32 Mood Green 5 Low 33 Mood Blue 6 Low To configure the GPIOs at once for L8-HD send to topic hasp/<nodename>/config a message with payload: {\"gpio\":{\"config\":[6360076,2229274,2491680,2623009,0,0,0,0]}} Note You can create you own firmware build with GPIOs and many other parameters pre-configured in user_config_override.h as factory defaults for Lanbon L8. Wiring Diagrams The switch supports several wiring configurations: Video LCD Configuration The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: st7789v = -D ST7789_DRIVER=1 ;-D CGRAM_OFFSET=1 ; Library will add offsets required -D TFT_SDA_READ ; Read from display, it only provides an SDA pin -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=2 ; see TFT_ROTATION values ; -D TFT_INVERSION_OFF ; for normal colors ; -D TFT_RGB_ORDER=TFT_RGB ; Colour order Red-Green-Blue -D TFT_RGB_ORDER=TFT_BGR ; Colour order Blue-Green-Red -D SPI_FREQUENCY=80000000 -D SPI_READ_FREQUENCY=6000000 -D USER_SETUP_LOADED=1 -D SUPPORT_TRANSACTIONS HASP build_flags Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.ps_ram} ;region -- TFT_eSPI build options ------------------------ ${lcd.st7789v} -D LANBONL8 -D TFT_RST=18 ; FCP pin2 RESET -D TFT_SCLK=19 ; FCP pin3 SCL -D TFT_DC=21 ; FCP pin4 D/C -D TFT_CS=22 ; FCP pin5 CS -D TFT_MOSI=23 ; FCP pin6 SDA -D TFT_MISO=25 ; FCP pin7 SDO -D TFT_BCKL=5 -D TOUCH_DRIVER=5206 -D TOUCH_SDA=4 -D TOUCH_SCL=0 -D TOUCH_IRQ=-1 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V on FCP pin10 -D TOUCH_FREQUENCY=400000 -D LED_RED=26 -D LED_GREEN=32 -D LED_BLUE=33 -D RELAY_1=12 -D RELAY_2=24 -D RELAY_3=37 ;endregion","title":"Lanbon l8"},{"location":"devices/lanbon-l8/#models","text":"L8-HS: 3 Relays - load up to 200W/gang L8-HD: 1 Dimmer - load up to 200W/gang L8-HT: Thermostat switch - not tested! L8-HB: Boiler switch - not tested!","title":"Models"},{"location":"devices/lanbon-l8/#form-factor","text":"EU model: 86mm x 86mm US model: 120mm x 74mm Both models have the same recessed housing sliding in the wall, sized 50x50mm, with rounded corners creating a diameter of about 59mm. This makes them suitable for both EU and US wall fixtures. The EU model fits in a properly deployed, standard 60mm round wall box and can be fixed with two side screws (use the screws which belong to the box instead of the ones shipped with the device), the US model fits in the standard rectangular box and can be fixed through the oval holes located 3 1/4\" apart. The depth of the wall box has to be at least 35-40mm because some room is needed for the wires coming out straight of the device. Both models are rated at AC 100-250V ~50-60Hz, the form factor can be a design choice regardless of the continental area.","title":"Form factor"},{"location":"devices/lanbon-l8/#bezel-color","text":"Black White","title":"Bezel Color"},{"location":"devices/lanbon-l8/#features","text":"Input voltage 110-250V ~ 50-60Hz AC ESP32-WROVER-B Capacitive touch screen Analog temperature sensor Energy counter Pros Cons 8 MB flash Mood LEDS not uniform 8 MB PSram Capactitive touch Energy monitor","title":"Features:"},{"location":"devices/lanbon-l8/#contents","text":"","title":"Contents"},{"location":"devices/lanbon-l8/#flashing","text":"Disclaimer Never connect high-voltage when the panel is not properly secured in place. You can follow this flashing guide on blakadder.com or this discussion post with instructions and photos to flash the firmware without having to open the device. Steps: Disengage the high-voltage power Detach the panel from the PSU power supply Connect RX, TX, IO0, GND and power pins to the female pinheader: Either supply 3.3V or 5V on the corresponding power pin, depending on the voltage supplied by the UART ttl (not both at the same time). Because there is no RESET pin, you need to powercycle the board to activate flash mode Once the serial connections are made, flash the Lanbon-L8 ESP32 firmware like any other device.","title":"Flashing"},{"location":"devices/lanbon-l8/#gpio-settings","text":"Pin L8-HS Group Default 12 Relay K3 1 Low 14 Relay 2 Low 26 Mood Red 4 Low 27 Relay 3 Low 32 Mood Green 5 Low 33 Mood Blue 6 Low To configure the GPIOs at once for L8-HS send to topic hasp/<nodename>/config a message with payload: {\"gpio\":{\"config\":[2360346,2491680,2623009,2097420,2097678,2097947,0,0]}} Pin L8-HD Group Default 12 Dimmer TX (K3) 1 Low 26 Mood Red 4 Low 32 Mood Green 5 Low 33 Mood Blue 6 Low To configure the GPIOs at once for L8-HD send to topic hasp/<nodename>/config a message with payload: {\"gpio\":{\"config\":[6360076,2229274,2491680,2623009,0,0,0,0]}} Note You can create you own firmware build with GPIOs and many other parameters pre-configured in user_config_override.h as factory defaults for Lanbon L8.","title":"GPIO Settings"},{"location":"devices/lanbon-l8/#wiring-diagrams","text":"The switch supports several wiring configurations:","title":"Wiring Diagrams"},{"location":"devices/lanbon-l8/#video","text":"","title":"Video"},{"location":"devices/lanbon-l8/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: st7789v = -D ST7789_DRIVER=1 ;-D CGRAM_OFFSET=1 ; Library will add offsets required -D TFT_SDA_READ ; Read from display, it only provides an SDA pin -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=2 ; see TFT_ROTATION values ; -D TFT_INVERSION_OFF ; for normal colors ; -D TFT_RGB_ORDER=TFT_RGB ; Colour order Red-Green-Blue -D TFT_RGB_ORDER=TFT_BGR ; Colour order Blue-Green-Red -D SPI_FREQUENCY=80000000 -D SPI_READ_FREQUENCY=6000000 -D USER_SETUP_LOADED=1 -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"devices/lanbon-l8/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.ps_ram} ;region -- TFT_eSPI build options ------------------------ ${lcd.st7789v} -D LANBONL8 -D TFT_RST=18 ; FCP pin2 RESET -D TFT_SCLK=19 ; FCP pin3 SCL -D TFT_DC=21 ; FCP pin4 D/C -D TFT_CS=22 ; FCP pin5 CS -D TFT_MOSI=23 ; FCP pin6 SDA -D TFT_MISO=25 ; FCP pin7 SDO -D TFT_BCKL=5 -D TOUCH_DRIVER=5206 -D TOUCH_SDA=4 -D TOUCH_SCL=0 -D TOUCH_IRQ=-1 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V on FCP pin10 -D TOUCH_FREQUENCY=400000 -D LED_RED=26 -D LED_GREEN=32 -D LED_BLUE=33 -D RELAY_1=12 -D RELAY_2=24 -D RELAY_3=37 ;endregion","title":"HASP build_flags"},{"location":"devices/m5stack-core2/","text":"M5Stack core2 A 2\" 240x320 capacitive touch display with a custom ESP32 module. Pros Cons 16 MB flash Small display 8 MB PSram Internal Battery","title":"M5stack core2"},{"location":"devices/wt32-sc01/","text":"Wireless-Tag Now you can experience easy touch interactions with an ESP32 development board! The WT32-SC01 incorporates an ESP32-WROVER-B module with a 3.5-inch capacitive touch display. openHASP can take advantage of the 320x480 resolution to show a large custom user-interface. On the back there is an expansion port with GPIOs so you can expand the capabilities as needed. Pros Cons 480x320 display 4 MB flash 8 MB PSram Viewing angles Price Mounting holes Available from: LCSC and Seeed studio The development board is powered via USB Type-C. It comes with only 4MB SPI Flash but the chip also has 8MB of PSRAM.","title":"Wt32 sc01"},{"location":"displays/ILI9341_IPS/","text":"ILI9341 IPS Panel A 240x320 IPS TFT display with an ILI9341 controller and XPT2046 touch controller. Improvement over TN versions of the display with amazing view angles. Pin Configuration Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Custom build Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; see TFT_ROTATION values -D INVERT_COLORS=1 ; to fix colors -D SPI_FREQUENCY=60000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus: ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC=5 ; DC, lcd pin 3 -D TFT_RST=15 ; RES, lcd pin 5 -D TFT_BCKL=-1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS=26 ; CS1, lcd pin 9 -D TOUCH_CS=17 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"ILI9341 IPS"},{"location":"displays/ILI9341_IPS/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/ILI9341_IPS/#custom-build","text":"Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; see TFT_ROTATION values -D INVERT_COLORS=1 ; to fix colors -D SPI_FREQUENCY=60000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus: ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC=5 ; DC, lcd pin 3 -D TFT_RST=15 ; RES, lcd pin 5 -D TFT_BCKL=-1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS=26 ; CS1, lcd pin 9 -D TOUCH_CS=17 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"Custom build"},{"location":"displays/MHS4001/","text":"MHS4001 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor. Including the Vcc and Gnd pins, a total of 12 connections need to be made to the MCU: Pin Configuration Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. LCD Configuration The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None -D TOUCH_CS=22","title":"MHS4001"},{"location":"displays/MHS4001/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MHS4001/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MHS4001/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None -D TOUCH_CS=22","title":"HASP build_flags"},{"location":"displays/MRB3511/","text":"MRB3511 14 GPIOs are required to drive the 8-bit parallel display. Another 3 GPIOs are needed for the I\u00b2C touch sensor. Including the Vcc, Gnd an Rst pins, a total of 23 connections need to be made to the MCU: Pin Configuration Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller. LCD Configuration The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: mrb3511 = -D ESP32_PARALLEL=1 -D ILI9488_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS=33 ; Chip select control pin -D TFT_DC=15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST=32 ; Reset pin -D TFT_WR=4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD=2 -D TFT_D0=12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1=13 ; so a single register write sets/clears all bits -D TFT_D2=26 -D TFT_D3=25 -D TFT_D4=17 -D TFT_D5=16 -D TFT_D6=27 -D TFT_D7=14 -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=34 ; use 34-39 as these are input only pins -D TOUCH_RST=-1 ; not used, connected to 3.3V","title":"MRB3511"},{"location":"displays/MRB3511/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MRB3511/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: mrb3511 = -D ESP32_PARALLEL=1 -D ILI9488_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MRB3511/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS=33 ; Chip select control pin -D TFT_DC=15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST=32 ; Reset pin -D TFT_WR=4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD=2 -D TFT_D0=12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1=13 ; so a single register write sets/clears all bits -D TFT_D2=26 -D TFT_D3=25 -D TFT_D4=17 -D TFT_D5=16 -D TFT_D6=27 -D TFT_D7=14 -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=34 ; use 34-39 as these are input only pins -D TOUCH_RST=-1 ; not used, connected to 3.3V","title":"HASP build_flags"},{"location":"displays/MSPxxxx/","text":"ILI9341 TFT Panel Models: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 The \"red\" 240x320 TFT displays with an ILI9341 controller and XPT2046 touch controller are very common. Make sure to select the touch version when ordering these screens online. The U2 touch chip needs to be populated on the board. Pin Configuration Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by openHASP, so it can be left disconnected in case of issues. LCD Configuration The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: lolin24 = -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; Use default, see TFT_ROTATION values -D SPI_FREQUENCY=40000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ ${lcd.lolin24} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_DC=5 -D TFT_CS=26 -D TFT_RST=-1 ; RST -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=17 ; (can also be 22 or 16) ;endregion","title":"MSPxxxx"},{"location":"displays/MSPxxxx/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by openHASP, so it can be left disconnected in case of issues.","title":"Pin Configuration"},{"location":"displays/MSPxxxx/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: lolin24 = -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; Use default, see TFT_ROTATION values -D SPI_FREQUENCY=40000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MSPxxxx/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ ${lcd.lolin24} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_DC=5 -D TFT_CS=26 -D TFT_RST=-1 ; RST -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=17 ; (can also be 22 or 16) ;endregion","title":"HASP build_flags"},{"location":"displays/WT32-SC01/","text":"WT32-SC01 A 320x480 capacitive touch display with on board ESP32-WROVER-B module.","title":"WT32 SC01"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/","text":"Waveshare RPi LCD (Rev C) This screen comes in 3.5\" and 4.0\" sizes. 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor and one extra GPIO for backlight dimming. Including the VCC and GND pins, a total of 13 connections need to be made to the MCU: Pin Configuration Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Attention (*) Only the WaveShare 4.0\" RPi LCD Revision C has a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature. LCD Configuration The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=22","title":"Waveshare RPi LCD Rev C"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Attention (*) Only the WaveShare 4.0\" RPi LCD Revision C has a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature.","title":"Pin Configuration"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=22","title":"HASP build_flags"}]}